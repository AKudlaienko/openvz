#///////////////////////////////////////////////////////////////////////////////
#//
#// prlsdkapi.py
#//
#// ***DO NOT EDIT THIS FILE***
#// ***IT IS GENERATED AUTOMATICALLY BY sdk2python UTILITY***
#//
#// Copyright (c) 1999-2017, Parallels International GmbH
#// All rights reserved.
#//
#///////////////////////////////////////////////////////////////////////////////

import os, sys, imp, string, time

prlsdk = None
try:
	import prlsdk
except Exception, e:
	try:
		prlsdk_module = os.environ['PRLSDK']
		sdklib = os.environ['SDKLIB']
		prlsdk = imp.load_dynamic('prlsdk', prlsdk_module)
		prlsdk.SetSDKLibraryPath(sdklib)
	except:
		print e
		err = 'Cannot import module "prlsdk" !'
		raise ImportError, err

SDK = prlsdk
consts = prlsdk.consts
errors = prlsdk.errors

class PrlSDKError(Exception):

	def __init__(self, result, error_code, err_obj):
		self.result = result
		self.error_code = error_code
		self.err_obj = err_obj
		Exception.__init__(self, 'SDK error: 0x%.8X: %s' % (error_code, self.get_details()))

	def get_result(self):
		return self.result

	def get_details(self):
		if self.err_obj != None:
			res_s = errors.PRL_ERR_SUCCESS
			res_l = errors.PRL_ERR_SUCCESS
			details_s = self.err_obj.get_err_string(1, 0)
			details_l = self.err_obj.get_err_string(0, 0)
		else:
			res_s, details_s, = SDK.PrlApi_GetResultDescription(self.error_code, 1, 0)
			res_l, details_l, = SDK.PrlApi_GetResultDescription(self.error_code, 0, 0)
		details = details_s + ' ' + details_l
		if res_s == errors.PRL_ERR_SUCCESS and res_l == errors.PRL_ERR_SUCCESS:
			return details
		return 'No error description!'

prlsdk.PrlSDKError = PrlSDKError

def conv_error(err):
	if err < 0:
		err = 0x100000000 + err
	return err
def sdk_check_result(result, err_obj = None):
	if result != errors.PRL_ERR_SUCCESS:
		raise PrlSDKError, (result, conv_error(result), err_obj)

class __DeinitSDK:
	def __init__(self):
		self.SDK = SDK
		self.id = 0
	def __call__(self):
		if self.SDK != None and self.SDK.IsSDKInitialized()[1]:
			res = self.SDK.DeinitializeSDK()[0]
			if res:
				raise Exception, ('SDK deinitialization failed! Error = 0x%.8X' % conv_error(res))
			self.id += 1
	def __del__(self):
		self.__call__()

deinit_sdk = __DeinitSDK()

def call_sdk_function(func_name, *args):
	result_list = getattr(SDK, func_name)(*args)
	if result_list[0] != conv_error(errors.PRL_ERR_UNIMPLEMENTED):
		sdk_check_result(result_list[0])
		if len(result_list) == 2:
			return result_list[1]
		if len(result_list) > 2:
			return result_list[1:]

def set_sdk_library_path(path):
	call_sdk_function('SetSDKLibraryPath', path)

def get_sdk_library_path():
	return call_sdk_function('GetSDKLibraryPath')

def is_sdk_initialized():
	return bool(call_sdk_function('IsSDKInitialized'))

def init_desktop_sdk():
	call_sdk_function('InitializeSDK', consts.PAM_DESKTOP_MAC)

def init_desktop_wl_sdk():
	call_sdk_function('InitializeSDK', consts.PAM_DESKTOP_WL)

def init_workstation_sdk():
	call_sdk_function('InitializeSDK', consts.PAM_WORKSTATION_EXTREME)

def init_player_sdk():
	call_sdk_function('InitializeSDK', consts.PAM_PLAYER)

def init_server_sdk():
	call_sdk_function('InitializeSDK', consts.PAM_SERVER)

def conv_handle_arg(arg):
	try:
		handle = arg.handle
		return handle
	except AttributeError:
		return arg

def handle_to_object(handle):
	pass

class ApiHelper:
	"""
	Provides common Python API system methods.
	"""

	def init(self, version):
		"""
		Initialize the API library.
		"""
		call_sdk_function('PrlApi_Init', version)

	def init_ex(self, nVersion, nAppMode, nFlags = 0, nReserved = 0):
		"""
		Initialize the API library (extended version).
		"""
		call_sdk_function('PrlApi_InitEx', nVersion, nAppMode, nFlags, nReserved)

	def deinit(self):
		"""
		De-initializes the library.
		"""
		call_sdk_function('PrlApi_Deinit')

	def get_version(self):
		"""
		Return the API version number.
		"""
		return call_sdk_function('PrlApi_GetVersion')

	def get_app_mode(self):
		"""
		Return the API application mode.
		"""
		return call_sdk_function('PrlApi_GetAppMode')

	def get_result_description(self, nErrCode, bIsBriefMessage = True, bFormated = False):
		"""
		Evaluate a return code and return a description of the problem.
		"""
		return call_sdk_function('PrlApi_GetResultDescription', nErrCode, bIsBriefMessage, bFormated)

	def get_message_type(self, nErrCode):
		"""
		Evaluate the specified error code and return its classification (warning, question, info, etc.).
		"""
		return call_sdk_function('PrlApi_GetMessageType', nErrCode)

	def msg_can_be_ignored(self, nErrCode):
		"""
		Evaluate an error code and determine if the error is critical.
		"""
		return bool(call_sdk_function('PrlApi_MsgCanBeIgnored', nErrCode))

	def get_crash_dumps_path(self):
		"""
		Return the name and path of the directory where crash dumps are stored.
		"""
		return call_sdk_function('PrlApi_GetCrashDumpsPath')

	def init_crash_handler(self, sCrashDumpFileSuffix):
		"""
		Initiate the standard crash dump handler.
		"""
		call_sdk_function('PrlApi_InitCrashHandler', sCrashDumpFileSuffix)

	def create_strings_list(self):
		return handle_to_object(call_sdk_function('PrlApi_CreateStringsList'))

	def create_handles_list(self):
		return handle_to_object(call_sdk_function('PrlApi_CreateHandlesList'))

	def create_op_type_list(self, nTypeSize):
		return handle_to_object(call_sdk_function('PrlApi_CreateOpTypeList', nTypeSize))

	def get_supported_oses_types(self, nHostOsType):
		"""
		Determine the supported OS types for the current API mode.
		"""
		return handle_to_object(call_sdk_function('PrlApi_GetSupportedOsesTypes', nHostOsType))

	def get_supported_oses_versions(self, nHostOsType, nGuestOsType):
		return handle_to_object(call_sdk_function('PrlApi_GetSupportedOsesVersions', nHostOsType, nGuestOsType))

	def get_default_os_version(self, nGuestOsType):
		"""
		Return the default guest OS version for the specified guest OS type.
		"""
		return call_sdk_function('PrlApi_GetDefaultOsVersion', nGuestOsType)

	def send_problem_report(self, sProblemReport, bUseProxy, sProxyHost, nProxyPort, sProxyUserLogin, sProxyUserPasswd, nProblemSendTimeout, nReserved):
		"""
		Send a problem report to the support server.
		"""
		return Job(SDK.PrlApi_SendProblemReport(sProblemReport, bUseProxy, sProxyHost, nProxyPort, sProxyUserLogin, sProxyUserPasswd, nProblemSendTimeout, nReserved)[0])

	def send_packed_problem_report(self, hProblemReport, bUseProxy, sProxyHost, nProxyPort, sProxyUserLogin, sProxyUserPasswd, nProblemSendTimeout, nReserved):
		return Job(SDK.PrlApi_SendPackedProblemReport(conv_handle_arg(hProblemReport), bUseProxy, sProxyHost, nProxyPort, sProxyUserLogin, sProxyUserPasswd, nProblemSendTimeout, nReserved)[0])

	def get_recommend_min_vm_mem(self, nOsVersion):
		"""
		Return recommended minimal memory size for guest OS defined in the OS version parameter.
		"""
		return call_sdk_function('PrlApi_GetRecommendMinVmMem', nOsVersion)

	def create_problem_report(self, nReportScheme):
		return handle_to_object(call_sdk_function('PrlApi_CreateProblemReport', nReportScheme))

	def switch_console_logging(self, bSwitchOn):
		call_sdk_function('PrlApi_SwitchConsoleLogging', bSwitchOn)

	def guest_to_string(self, nGuestId):
		"""
		Return string representation of GuestOS
		"""
		return call_sdk_function('PrlApi_GuestToString', nGuestId)

class Debug:
	"""
	Provides common Python API debug methods.
	"""

	def get_handles_num(self, type):
		"""
		Determine how many handles were instantiated in the API library.
		"""
		return call_sdk_function('PrlDbg_GetHandlesNum', type)

	def prl_result_to_string(self, value):
		"""
		Return a readable string representation of the L{Result} value.
		"""
		return call_sdk_function('PrlDbg_PrlResultToString', value)

	def handle_type_to_string(self, handle_type):
		"""
		Return a readable string representation of the specified handle type.
		"""
		return call_sdk_function('PrlDbg_HandleTypeToString', handle_type)

	def event_type_to_string(self, event_type):
		"""
		Return a readable string representation of the specified event type.
		"""
		return call_sdk_function('PrlDbg_EventTypeToString', event_type)

class _Handle(object):

	def __init__(self, handle = consts.PRL_INVALID_HANDLE):
		self.handle = handle
		self.id = deinit_sdk.id
		if self.__class__ is _Handle:
			raise TypeError, 'class _Handle is a private class'

	def add_ref(self):
		call_sdk_function('PrlHandle_AddRef', self.handle)

	def free(self):
		call_sdk_function('PrlHandle_Free', self.handle)

	def get_type(self):
		return call_sdk_function('PrlHandle_GetType', self.handle)

	def reg_event_handler(self, callback_func, userData):
		call_sdk_function('PrlHandle_RegEventHandler', self.handle, callback_func, userData)

	def unreg_event_handler(self, callback_func, userData):
		call_sdk_function('PrlHandle_UnregEventHandler', self.handle, callback_func, userData)

	def get_package_id(self):
		return call_sdk_function('PrlHandle_GetPackageId', self.handle)

	def from_string(self, sXml):
		call_sdk_function('PrlHandle_FromString', self.handle, sXml)

	def get_handle_type(self):
		return call_sdk_function('PrlHandle_GetType', self.handle)

	def __del__(self):
		if self.handle != consts.PRL_INVALID_HANDLE and self.id == deinit_sdk.id:
			self.free()

class StringList(_Handle):
	"""
	The StringList class is a generic string container.
	"""

	def __init__(self, handle = consts.PRL_INVALID_HANDLE):
		self.handle = handle
		if self.handle == consts.PRL_INVALID_HANDLE:
			self.handle = call_sdk_function('PrlApi_CreateStringsList')
		_Handle.__init__(self, self.handle)

	def get_items_count(self):
		return call_sdk_function('PrlStrList_GetItemsCount', self.handle)

	def add_item(self, sItem):
		call_sdk_function('PrlStrList_AddItem', self.handle, sItem)

	def get_item(self, nItemIndex):
		return call_sdk_function('PrlStrList_GetItem', self.handle, nItemIndex)

	def remove_item(self, nItemIndex):
		call_sdk_function('PrlStrList_RemoveItem', self.handle, nItemIndex)

	def __len__(self):
		return self.get_items_count()

	def __getitem__(self, index):
		if index < 0 or index >= self.__len__():
			raise IndexError
		return self.get_item(index)

	def __iter__(self):
		for i in xrange(self.__len__()):
			yield self.__getitem__(i)

class HandleList(_Handle):
	"""
	A generic container containing a list of handles (objects).
	"""

	def __init__(self, handle = consts.PRL_INVALID_HANDLE):
		self.handle = handle
		if self.handle == consts.PRL_INVALID_HANDLE:
			self.handle = call_sdk_function('PrlApi_CreateHandlesList')
		_Handle.__init__(self, self.handle)

	def get_items_count(self):
		return call_sdk_function('PrlHndlList_GetItemsCount', self.handle)

	def add_item(self, hItem):
		call_sdk_function('PrlHndlList_AddItem', self.handle, conv_handle_arg(hItem))

	def get_item(self, nItemIndex):
		return handle_to_object(call_sdk_function('PrlHndlList_GetItem', self.handle, nItemIndex))

	def remove_item(self, nItemIndex):
		call_sdk_function('PrlHndlList_RemoveItem', self.handle, nItemIndex)

	def __len__(self):
		return self.get_items_count()

	def __getitem__(self, index):
		if index < 0 or index >= self.__len__():
			raise IndexError
		return self.get_item(index)

	def __iter__(self):
		for i in xrange(self.__len__()):
			yield self.__getitem__(i)

class OpTypeList(_Handle):

	def __init__(self, handle = consts.PRL_INVALID_HANDLE):
		self.handle = handle
		if self.handle == consts.PRL_INVALID_HANDLE:
			self.handle = call_sdk_function('PrlApi_CreateOpTypeList')
		_Handle.__init__(self, self.handle)

	def get_items_count(self):
		return call_sdk_function('PrlOpTypeList_GetItemsCount', self.handle)

	def get_item(self, nItemIndex):
		call_sdk_function('PrlOpTypeList_GetItem', self.handle, nItemIndex)

	def remove_item(self, nItemIndex):
		call_sdk_function('PrlOpTypeList_RemoveItem', self.handle, nItemIndex)

	def get_type_size(self):
		return call_sdk_function('PrlOpTypeList_GetTypeSize', self.handle)

	def signed(self, nItemIndex):
		return self.__getitem__(nItemIndex)[0]

	def unsigned(self, nItemIndex):
		return self.__getitem__(nItemIndex)[1]

	def double(self, nItemIndex):
		return self.__getitem__(nItemIndex)[2]

	def __len__(self):
		return self.get_items_count()

	def __getitem__(self, index):
		if index < 0 or index >= self.__len__():
			raise IndexError
		return self.get_item(index)

	def __iter__(self):
		for i in xrange(self.__len__()):
			yield self.__getitem__(i)

class Result(_Handle):
	"""
	Contains the results of an asynchronous operation.
	"""

	def get_params_count(self):
		"""
		Determine the number of items (strings, objects) in the Result object.
		"""
		return call_sdk_function('PrlResult_GetParamsCount', self.handle)

	def get_param_by_index(self, nIndex):
		"""
		Obtain an object containing the results identified by index.
		"""
		return handle_to_object(call_sdk_function('PrlResult_GetParamByIndex', self.handle, nIndex))

	def get_param(self):
		"""
		Obtain an object containing the results of the corresponding asynchronous operation.
		"""
		return handle_to_object(call_sdk_function('PrlResult_GetParam', self.handle))

	def get_param_by_index_as_string(self, nIndex):
		"""
		Obtain a string result from the Result object identified by index.
		"""
		return call_sdk_function('PrlResult_GetParamByIndexAsString', self.handle, nIndex)

	def get_param_as_string(self):
		"""
		Obtain a string result from the Result object.
		"""
		return call_sdk_function('PrlResult_GetParamAsString', self.handle)

	def __len__(self):
		return self.get_params_count()

	def __getitem__(self, index):
		if index < 0 or index >= self.__len__():
			raise IndexError
		return self.get_param_by_index(index)

	def __iter__(self):
		for i in xrange(self.__len__()):
			yield self.__getitem__(i)

class Event(_Handle):
	"""
	Contains information about a system event or an extended error information in 
	an asynchronous method invocation.
	"""

	def get_type(self):
		return call_sdk_function('PrlEvent_GetType', self.handle)

	def get_server(self):
		return handle_to_object(call_sdk_function('PrlEvent_GetServer', self.handle))

	def get_vm(self):
		return handle_to_object(call_sdk_function('PrlEvent_GetVm', self.handle))

	def get_job(self):
		return handle_to_object(call_sdk_function('PrlEvent_GetJob', self.handle))

	def get_params_count(self):
		return call_sdk_function('PrlEvent_GetParamsCount', self.handle)

	def get_param(self, nIndex):
		return handle_to_object(call_sdk_function('PrlEvent_GetParam', self.handle, nIndex))

	def get_param_by_name(self, sParamName):
		return handle_to_object(call_sdk_function('PrlEvent_GetParamByName', self.handle, sParamName))

	def get_err_code(self):
		return call_sdk_function('PrlEvent_GetErrCode', self.handle)

	def get_err_string(self, bIsBriefMessage, bFormated):
		return call_sdk_function('PrlEvent_GetErrString', self.handle, bIsBriefMessage, bFormated)

	def can_be_ignored(self):
		return bool(call_sdk_function('PrlEvent_CanBeIgnored', self.handle))

	def is_answer_required(self):
		return bool(call_sdk_function('PrlEvent_IsAnswerRequired', self.handle))

	def get_issuer_type(self):
		return call_sdk_function('PrlEvent_GetIssuerType', self.handle)

	def get_issuer_id(self):
		return call_sdk_function('PrlEvent_GetIssuerId', self.handle)

	def create_answer_event(self, nAnswer):
		return handle_to_object(call_sdk_function('PrlEvent_CreateAnswerEvent', self.handle, nAnswer))

	def from_string(self, sEvent):
		call_sdk_function('PrlEvent_FromString', self.handle, sEvent)

	def __len__(self):
		return self.get_params_count()

	def __getitem__(self, index):
		if index < 0 or index >= self.__len__():
			raise IndexError
		return self.get_param(index)

	def __iter__(self):
		for i in xrange(self.__len__()):
			yield self.__getitem__(i)

class EventParam(_Handle):
	"""
	Contains the system event parameter data.
	"""

	def get_name(self):
		return call_sdk_function('PrlEvtPrm_GetName', self.handle)

	def get_type(self):
		return call_sdk_function('PrlEvtPrm_GetType', self.handle)

	def to_string(self):
		return call_sdk_function('PrlEvtPrm_ToString', self.handle)

	def to_cdata(self):
		return call_sdk_function('PrlEvtPrm_ToCData', self.handle)

	def to_uint32(self):
		return call_sdk_function('PrlEvtPrm_ToUint32', self.handle)

	def to_int32(self):
		return call_sdk_function('PrlEvtPrm_ToInt32', self.handle)

	def to_uint64(self):
		return call_sdk_function('PrlEvtPrm_ToUint64', self.handle)

	def to_int64(self):
		return call_sdk_function('PrlEvtPrm_ToInt64', self.handle)

	def to_boolean(self):
		return bool(call_sdk_function('PrlEvtPrm_ToBoolean', self.handle))

	def to_handle(self):
		return handle_to_object(call_sdk_function('PrlEvtPrm_ToHandle', self.handle))

class Job(_Handle):
	"""
	Provides methods for managing asynchronous operations (jobs).
	"""

	def wait(self, msecs = sys.maxint):
		"""
		Suspend the main thread and wait for the job to finish.
		"""
		call_sdk_function('PrlJob_Wait', self.handle, msecs)
		err_obj = None
		try:
			err_obj = self.get_error()
		except:
			pass
		sdk_check_result(self.get_ret_code(), err_obj)
		return self.get_result()

	def cancel(self):
		"""
		Cancel the specified job.
		"""
		return Job(SDK.PrlJob_Cancel(self.handle)[0])

	def get_status(self):
		"""
		Obtain the current job status.
		"""
		return call_sdk_function('PrlJob_GetStatus', self.handle)

	def get_progress(self):
		"""
		Obtain the job progress info.
		"""
		return call_sdk_function('PrlJob_GetProgress', self.handle)

	def get_ret_code(self):
		"""
		Obtain the return code from the job object.
		"""
		return call_sdk_function('PrlJob_GetRetCode', self.handle)

	def get_result(self):
		"""
		Obtain the L{Result} object containing the results returned by the job.
		"""
		return handle_to_object(call_sdk_function('PrlJob_GetResult', self.handle))

	def get_error(self):
		"""
		Provide additional job error information.
		"""
		return handle_to_object(call_sdk_function('PrlJob_GetError', self.handle))

	def get_op_code(self):
		"""
		Return the job operation code.
		"""
		return call_sdk_function('PrlJob_GetOpCode', self.handle)

	def is_request_was_sent(self):
		return bool(call_sdk_function('PrlJob_IsRequestWasSent', self.handle))

class Server(_Handle):
	"""
	The main class providing methods for accessing Dispatcher Service.
	Most of the operations in the Python API begin with obtaining an instance of this class.
	The class is used to establish a connection with the Dispatcher Service. Its other methods can be used
	to perform various tasks related to the Dispatcher Service itself, higher level virtual machine tasks,
	such as obtaining the virtual machine list or creating a virtual machine, and many others.
	"""

	def __init__(self, handle = consts.PRL_INVALID_HANDLE):
		self.handle = handle
		if self.handle == consts.PRL_INVALID_HANDLE:
			self.handle = call_sdk_function('PrlSrv_Create')
		_Handle.__init__(self, self.handle)

	def create(self):
		"""
		Create a new instance of the Server class.
		@return: A new instance of L{Server}.
		"""
		return handle_to_object(call_sdk_function('PrlSrv_Create'))

	def login(self, host, user, passwd, sPrevSessionUuid = '', port_cmd = 0, timeout = 0, security_level = consts.PSL_HIGH_SECURITY):
		"""
		Login to a remote Dispatcher Service.
		"""
		return Job(SDK.PrlSrv_Login(self.handle, host, user, passwd, sPrevSessionUuid, port_cmd, timeout, security_level)[0])

	def login_local(self, sPrevSessionUuid = '', port = 0, security_level = consts.PSL_HIGH_SECURITY):
		"""
		Login to the local Dispatcher Service.
		"""
		return Job(SDK.PrlSrv_LoginLocal(self.handle, sPrevSessionUuid, port, security_level)[0])

	def logoff(self):
		"""
		Log off the Dispatcher Service.
		"""
		return Job(SDK.PrlSrv_Logoff(self.handle)[0])

	def reg_event_handler(self, callback_func, userData):
		"""
		Register an event handler.
		"""
		call_sdk_function('PrlSrv_RegEventHandler', self.handle, callback_func, userData)

	def unreg_event_handler(self, callback_func, userData):
		"""
		Unregister the specified event handler.
		"""
		call_sdk_function('PrlSrv_UnregEventHandler', self.handle, callback_func, userData)

	def get_questions(self):
		"""
		Allows to synchronously receive questions from Dispatcher Service.
		"""
		return handle_to_object(call_sdk_function('PrlSrv_GetQuestions', self.handle))

	def set_non_interactive_session(self, bNonInteractive, nFlags = 0):
		"""
		Set the session in noninteractive or interactive mode.
		"""
		return Job(SDK.PrlSrv_SetNonInteractiveSession(self.handle, bNonInteractive, nFlags)[0])

	def is_non_interactive_session(self):
		return bool(call_sdk_function('PrlSrv_IsNonInteractiveSession', self.handle))

	def disable_confirmation_mode(self, sUser, sPasswd, nFlags = 0):
		"""
		Disable administrator confirmation mode for the session.
		"""
		return Job(SDK.PrlSrv_DisableConfirmationMode(self.handle, sUser, sPasswd, nFlags)[0])

	def enable_confirmation_mode(self, nFlags = 0):
		"""
		Enable administrator confirmation mode for the session.
		"""
		return Job(SDK.PrlSrv_EnableConfirmationMode(self.handle, nFlags)[0])

	def is_confirmation_mode_enabled(self):
		"""
		Determine confirmation mode for the session.
		"""
		return bool(call_sdk_function('PrlSrv_IsConfirmationModeEnabled', self.handle))

	def get_srv_config(self):
		"""
		Obtain the L{ServerConfig} object containing the host configuration information. 
		@return: A L{Job} object.
		The L{ServerConfig} object is obtained from the L{Result} object.
		"""
		return Job(SDK.PrlSrv_GetSrvConfig(self.handle)[0])

	def get_common_prefs(self):
		"""
		Obtain the L{DispConfig} object containing the specified Dispatcher Service preferences info. 
		@return: A L{Job} object.
		"""
		return Job(SDK.PrlSrv_GetCommonPrefs(self.handle)[0])

	def common_prefs_begin_edit(self):
		"""
		Mark the beginning of the Dispatcher Service preferences modification operation.
		This method must be called before making any changes to the
		Dispatcher Service common preferences through L{DispConfig}. When you are done making the
		changes, call L{Server.common_prefs_commit} to commit the changes.
		"""
		return Job(SDK.PrlSrv_CommonPrefsBeginEdit(self.handle)[0])

	def common_prefs_commit(self, hDispCfg):
		"""
		Commit the Server preferences changes.
		@param  hDispCfg: A instance of L{DispConfig} contaning the Dispatcher Service preferences info.
		"""
		return Job(SDK.PrlSrv_CommonPrefsCommit(self.handle, conv_handle_arg(hDispCfg))[0])

	def common_prefs_commit_ex(self, hDispCfg, nFlags):
		return Job(SDK.PrlSrv_CommonPrefsCommitEx(self.handle, conv_handle_arg(hDispCfg), nFlags)[0])

	def get_user_profile(self):
		"""
		Obtain the L{UserConfig} object containing profile data of the currently logged in user. 
		@return: A L{Job} object.
		"""
		return Job(SDK.PrlSrv_GetUserProfile(self.handle)[0])

	def get_user_info_list(self):
		"""
		Obtain a list of L{UserInfo} objects containing information about all known users. 
		@return: A L{Job} object.
		"""
		return Job(SDK.PrlSrv_GetUserInfoList(self.handle)[0])

	def get_user_info(self, sUserId):
		"""
		Obtain the L{UserInfo} object containing information about the specified user. 
		@param sUserId: UUID of the user to obtain the information for.
		@return: A L{Job} object.
		"""
		return Job(SDK.PrlSrv_GetUserInfo(self.handle, sUserId)[0])

	def get_virtual_network_list(self, nFlags = 0):
		"""
		Obtain the L{VirtualNet} object containing information about all existing virtual networks.
		"""
		return Job(SDK.PrlSrv_GetVirtualNetworkList(self.handle, nFlags)[0])

	def add_virtual_network(self, hVirtNet, nFlags = 0):
		"""
		Add a new virtual network to the Dispatcher Service configuration.
		@param  hVirtNet: An instance of the L{VirtualNet} class containing the vitual network information.
		@param  nFlags: Reserved parameter.
		"""
		return Job(SDK.PrlSrv_AddVirtualNetwork(self.handle, conv_handle_arg(hVirtNet), nFlags)[0])

	def update_virtual_network(self, hVirtNet, nFlags = 0):
		"""
		Update parameters of an existing virtual network.
		"""
		return Job(SDK.PrlSrv_UpdateVirtualNetwork(self.handle, conv_handle_arg(hVirtNet), nFlags)[0])

	def delete_virtual_network(self, hVirtNet, nFlags = 0):
		"""
		Remove an existing virtual network from the Dispatcher Service configuration. 
		@param  hVirtNet: An instance of L{VirtualNet} identifying the virtual network.
		@param  nFlags: Reserved parameter.
		"""
		return Job(SDK.PrlSrv_DeleteVirtualNetwork(self.handle, conv_handle_arg(hVirtNet), nFlags)[0])

	def update_offline_service(self, hOffmgmtService, nFlags):
		return Job(SDK.PrlSrv_UpdateOfflineService(self.handle, conv_handle_arg(hOffmgmtService), nFlags)[0])

	def delete_offline_service(self, hOffmgmtService, nFlags):
		return Job(SDK.PrlSrv_DeleteOfflineService(self.handle, conv_handle_arg(hOffmgmtService), nFlags)[0])

	def get_offline_services_list(self, nFlags):
		return Job(SDK.PrlSrv_GetOfflineServicesList(self.handle, nFlags)[0])

	def update_network_classes_list(self, hNetworkClassesList, nFlags):
		return Job(SDK.PrlSrv_UpdateNetworkClassesList(self.handle, conv_handle_arg(hNetworkClassesList), nFlags)[0])

	def get_network_classes_list(self, nFlags):
		return Job(SDK.PrlSrv_GetNetworkClassesList(self.handle, nFlags)[0])

	def update_network_shaping_config(self, hNetworkShapingConfig, nFlags):
		return Job(SDK.PrlSrv_UpdateNetworkShapingConfig(self.handle, conv_handle_arg(hNetworkShapingConfig), nFlags)[0])

	def get_network_shaping_config(self, nFlags):
		return Job(SDK.PrlSrv_GetNetworkShapingConfig(self.handle, nFlags)[0])

	def configure_generic_pci(self, hDevList, nFlags = 0):
		"""
		Configure the PCI device assignment. 
		@param  hDevList: A list of L{HostPciDevice} objects.
		@param  nFlags: Reserved parameter.
		"""
		return Job(SDK.PrlSrv_ConfigureGenericPci(self.handle, conv_handle_arg(hDevList), nFlags)[0])

	def get_statistics(self):
		"""
		Obtain the L{Statistics} object containing the host resource usage statistics. 
		@return: A L{Job} object.
		"""
		return Job(SDK.PrlSrv_GetStatistics(self.handle)[0])

	def user_profile_begin_edit(self):
		return Job(SDK.PrlSrv_UserProfileBeginEdit(self.handle)[0])

	def user_profile_commit(self, hUserProfile):
		"""
		Saves (commits) user profile changes to the Dispatcher Service.
		"""
		return Job(SDK.PrlSrv_UserProfileCommit(self.handle, conv_handle_arg(hUserProfile))[0])

	def is_connected(self):
		"""
		Determine if the connection to the specified Dispatcher Service is active.
		"""
		return call_sdk_function('PrlSrv_IsConnected', self.handle)

	def get_server_info(self):
		"""
		Obtain the L{ServerInfo} object containing the host computer information.
		@return: A L{Job} object.
		"""
		return handle_to_object(call_sdk_function('PrlSrv_GetServerInfo', self.handle))

	def register_vm(self, strVmDirPath, bNonInteractiveMode = False):
		"""
		Register an existing virtual machine with the Dispatcher Service.
		This is an asynchronous method.
		@param strVmDirPath:              Name and path of the virtual machine directory.
		@param  bNonInteractiveMode: Set to L{True} to use non-interactive mode.
		                                                            Set to L{False} to use interactive mode.
		@return: An instance of the L{Vm} class containing information about
		the virtual machine that was registered.
		"""
		return Job(SDK.PrlSrv_RegisterVm(self.handle, strVmDirPath, bNonInteractiveMode)[0])

	def register_vm_ex(self, strVmDirPath, nFlags):
		"""
		Register an existing virtual machine with Dispatcher Service (extended version).
		"""
		return Job(SDK.PrlSrv_RegisterVmEx(self.handle, strVmDirPath, nFlags)[0])

	def register_vm_with_uuid(self, strVmDirPath, strVmUuid, nFlags):
		return Job(SDK.PrlSrv_RegisterVmWithUuid(self.handle, strVmDirPath, strVmUuid, nFlags)[0])

	def register3rd_party_vm(self, strVmConfigPath, strVmRootDirPath, nFlags):
		return Job(SDK.PrlSrv_Register3rdPartyVm(self.handle, strVmConfigPath, strVmRootDirPath, nFlags)[0])

	def create_vm(self):
		"""
		Create a new instaince of the L{Vm} class.
		@return: A new instance of L{Vm}.
		"""
		return handle_to_object(call_sdk_function('PrlSrv_CreateVm', self.handle))

	def get_vm_list(self):
		"""
		Obtain a list of virtual machines from the host.
		@return: A L{Job} object. 
		The list of virtual machines can be obtained from the L{Result} object as a list of L{Vm} objects.
		"""
		return Job(SDK.PrlSrv_GetVmList(self.handle)[0])

	def get_vm_list_ex(self, nFlags):
		return Job(SDK.PrlSrv_GetVmListEx(self.handle, nFlags)[0])

	def get_default_vm_config(self, nVmType, sConfigSample, nOsVersion, nFlags):
		return Job(SDK.PrlSrv_GetDefaultVmConfig(self.handle, nVmType, sConfigSample, nOsVersion, nFlags)[0])

	def create_vm_backup(self, sVmUuid, sTargetHost, nTargetPort, sTargetSessionId, strDescription = '', backup_flags = consts.PBT_FULL, reserved_flags = 0, force_operation = True):
		"""
		Backup an existing virtual machine to a backup server.
		@param  sVmUuid: The virtual machine UUID
		@param sTargetHost: The name of the target host machine.
		@param  nTargetPort: Port number on the target host.
		@param  sTargetSessionId: The targt Dispatcher Service session ID.
		@param  strDescription: Backup description.
		@param backup_flags: Backup options.
		@param  reserved_flags: Reserved backup flags.
		@param force_operation: Ignore all possible questions from the Dispatcher Service (non-interactive mode).
		@return: A L{Job} object.
		"""
		return Job(SDK.PrlSrv_CreateVmBackup(self.handle, sVmUuid, sTargetHost, nTargetPort, sTargetSessionId, strDescription, backup_flags, reserved_flags, force_operation)[0])

	def restore_vm_backup(self, sVmUuid, sBackupUuid, sTargetHost, nTargetPort, sTargetSessionId, sTargetVmHomePath = '', sTargetVmName = '', restore_flags = consts.PVMSL_LOW_SECURITY, reserved_flags = 0, force_operation = True):
		"""
		Restore a virtual machine from a backup server.
		"""
		return Job(SDK.PrlSrv_RestoreVmBackup(self.handle, sVmUuid, sBackupUuid, sTargetHost, nTargetPort, sTargetSessionId, sTargetVmHomePath, sTargetVmName, restore_flags, reserved_flags, force_operation)[0])

	def get_backup_tree(self, sUuid, sTargetHost, nTargetPort, sTargetSessionId, backup_flags = consts.PBT_FULL, reserved_flags = 0, force_operation = True):
		"""
		Obtain a backup tree from the backup server. 
		@param sVmUuid: The target virtual machine UUID. Empty string gets the tree for all virtual machines.
		@param  sTargetHost: The name of the target host machine.
		@param  nTargetPort: Port number.
		@param  sTargetSessionId: The target Dispatcher Service session ID.
		@param backup_flags: Backup options.
		@param reserved_flags: Reserved flags parameter.
		@param  force_operation: Ignore all questions from the Dispatcher Service (non-interactive mode).
		@return: A L{Job} object.
		The backup tree data is obtained as an XML document from the L{Result} object.
		"""
		return Job(SDK.PrlSrv_GetBackupTree(self.handle, sUuid, sTargetHost, nTargetPort, sTargetSessionId, backup_flags, reserved_flags, force_operation)[0])

	def remove_vm_backup(self, sVmUuid, sBackupUuid, sTargetHost, nTargetPort, sTargetSessionId, remove_flags, reserved_flags, force_operation):
		"""
		Remove backup of the virtual machine from the backup server.
		"""
		return Job(SDK.PrlSrv_RemoveVmBackup(self.handle, sVmUuid, sBackupUuid, sTargetHost, nTargetPort, sTargetSessionId, remove_flags, reserved_flags, force_operation)[0])

	def subscribe_to_host_statistics(self):
		"""
		Subscribe to receive host statistics.
		This is an asynchronous method.
		@return: A L{Job} object.
		"""
		return Job(SDK.PrlSrv_SubscribeToHostStatistics(self.handle)[0])

	def unsubscribe_from_host_statistics(self):
		"""
		Cancel the host statistics subscription.
		This is an asynchronous method.
		@return: A L{Job} object.
		"""
		return Job(SDK.PrlSrv_UnsubscribeFromHostStatistics(self.handle)[0])

	def shutdown(self, bForceShutdown = False):
		"""
		Shut down the Dispatcher Service.
		"""
		return Job(SDK.PrlSrv_Shutdown(self.handle, bForceShutdown)[0])

	def shutdown_ex(self, nFlags):
		return Job(SDK.PrlSrv_ShutdownEx(self.handle, nFlags)[0])

	def fs_get_disk_list(self):
		"""
		Returns a list of root directories on the host computer.
		"""
		return Job(SDK.PrlSrv_FsGetDiskList(self.handle)[0])

	def fs_get_dir_entries(self, path):
		"""
		Retrieve information about a file system entry on the host. 
		@param  path: Directory name or drive letter for which to get the information.
		@return: A L{Job} object.
		The directory information is returned as an L{FsInfo} object and is obtained from the  L{Result} object.
		"""
		return Job(SDK.PrlSrv_FsGetDirEntries(self.handle, path)[0])

	def fs_create_dir(self, path):
		"""
		Create a directory in the specified location on the host. 
		@param  path: Full name and path of the directory to create.
		"""
		return Job(SDK.PrlSrv_FsCreateDir(self.handle, path)[0])

	def fs_remove_entry(self, path):
		"""
		Remove a file system entry from the host computer. 
		@param path: Name and path of the entry to remove.
		"""
		return Job(SDK.PrlSrv_FsRemoveEntry(self.handle, path)[0])

	def fs_can_create_file(self, path):
		"""
		Determine if the current user has rights to create a file on the host. 
		@param path: Full path of the target directory.
		@return: Boolean. True - the user can create files in the specified directory. False - otherwise.
		"""
		return Job(SDK.PrlSrv_FsCanCreateFile(self.handle, path)[0])

	def fs_rename_entry(self, oldPath, newPath):
		"""
		Rename a file system entry on the host. 
		@param  oldPath: Name and path of the entry to rename.
		@param  newPath: New name and path.
		"""
		return Job(SDK.PrlSrv_FsRenameEntry(self.handle, oldPath, newPath)[0])

	def update_license(self, sKey, sUser, sCompany):
		"""
		Installs license on the specified Dispatcher Service.
		"""
		return Job(SDK.PrlSrv_UpdateLicense(self.handle, sKey, sUser, sCompany)[0])

	def update_license_ex(self, sKey, sUser, sCompany, nFlags):
		return Job(SDK.PrlSrv_UpdateLicenseEx(self.handle, sKey, sUser, sCompany, nFlags)[0])

	def get_license_info(self):
		"""
		Obtain the L{License} object containing the license information. 
		@return: A L{Job} object.
		"""
		return Job(SDK.PrlSrv_GetLicenseInfo(self.handle)[0])

	def send_answer(self, hAnswer):
		"""
		Send an answer to the Dispatcher Service in response to a question.
		"""
		return Job(SDK.PrlSrv_SendAnswer(self.handle, conv_handle_arg(hAnswer))[0])

	def start_search_vms(self, hStringsList = consts.PRL_INVALID_HANDLE):
		"""
		Searche for unregistered virtual machines at the specified location(s).
		"""
		return Job(SDK.PrlSrv_StartSearchVms(self.handle, conv_handle_arg(hStringsList))[0])

	def net_service_start(self):
		"""
		Start the network service.
		"""
		return Job(SDK.PrlSrv_NetServiceStart(self.handle)[0])

	def net_service_stop(self):
		"""
		Stop the network service.
		"""
		return Job(SDK.PrlSrv_NetServiceStop(self.handle)[0])

	def net_service_restart(self):
		"""
		Restarts the network service.
		"""
		return Job(SDK.PrlSrv_NetServiceRestart(self.handle)[0])

	def net_service_restore_defaults(self):
		"""
		Restores the default settings of the network service.
		"""
		return Job(SDK.PrlSrv_NetServiceRestoreDefaults(self.handle)[0])

	def get_net_service_status(self):
		"""
		Obtain the L{NetService} object containing the network service status information.
		@return: A L{Job} object.
		"""
		return Job(SDK.PrlSrv_GetNetServiceStatus(self.handle)[0])

	def get_problem_report(self):
		"""
		Obtain a problem report in the event of a virtual machine operation failure.
		@return: A L{Job} object.
		The report is returned as a string that is obtained from the L{Result} object.
		"""
		return Job(SDK.PrlSrv_GetProblemReport(self.handle)[0])

	def get_packed_problem_report(self, nFlags):
		return Job(SDK.PrlSrv_GetPackedProblemReport(self.handle, nFlags)[0])

	def attach_to_lost_task(self, sTaskId):
		"""
		Obtain a handle to a running task after the connection to the Dispatcher Service was lost.
		@param  sTaskId: The ID of the task to attach to. The ID is obtained from the L{LoginResponse} object.
		"""
		return Job(SDK.PrlSrv_AttachToLostTask(self.handle, sTaskId)[0])

	def get_supported_oses(self):
		return handle_to_object(call_sdk_function('PrlSrv_GetSupportedOses', self.handle))

	def create_unattended_cd(self, nGuestType, sUserName, sPasswd, sFullUserName, sOsDistroPath, sOutImagePath):
		"""
		Create a bootable ISO-image for unattended Linux installation.
		"""
		return Job(SDK.PrlSrv_CreateUnattendedCd(self.handle, nGuestType, sUserName, sPasswd, sFullUserName, sOsDistroPath, sOutImagePath)[0])

	def fs_generate_entry_name(self, sDirPath, sFilenamePrefix = '', sFilenameSuffix = '', sIndexDelimiter = ''):
		"""
		Automatically generate a unique name for a new directory. 
		@param  sDirPath: Full name and path of the target directory.
		@param  sFilenamePrefix: A prefix to to use in the directory name. Pass empty string for default.
		@param  sFilenameSuffix: A suffix to use in the name. Pass empty string for default.
		@param  sIndexDelimiter: A character to use as a delimiter between prefix and index.
		@return: A L{Job} object.
		"""
		return Job(SDK.PrlSrv_FsGenerateEntryName(self.handle, sDirPath, sFilenamePrefix, sFilenameSuffix, sIndexDelimiter)[0])

	def subscribe_to_perf_stats(self, sFilter):
		"""
		Subscribe to receive perfomance statistics.
		"""
		return Job(SDK.PrlSrv_SubscribeToPerfStats(self.handle, sFilter)[0])

	def unsubscribe_from_perf_stats(self):
		"""
		Cancels the performance statistics subscription.
		"""
		return Job(SDK.PrlSrv_UnsubscribeFromPerfStats(self.handle)[0])

	def get_perf_stats(self, sFilter):
		return Job(SDK.PrlSrv_GetPerfStats(self.handle, sFilter)[0])

	def has_restriction(self, nRestrictionKey):
		return bool(call_sdk_function('PrlSrv_HasRestriction', self.handle, nRestrictionKey))

	def get_restriction_info(self, nRestrictionKey):
		return handle_to_object(call_sdk_function('PrlSrv_GetRestrictionInfo', self.handle, nRestrictionKey))

	def install_appliance(self, hAppCfg, sVmParentPath, nFlags):
		return Job(SDK.PrlSrv_InstallAppliance(self.handle, conv_handle_arg(hAppCfg), sVmParentPath, nFlags)[0])

	def cancel_install_appliance(self, hAppCfg, nFlags):
		return Job(SDK.PrlSrv_CancelInstallAppliance(self.handle, conv_handle_arg(hAppCfg), nFlags)[0])

	def stop_install_appliance(self, hAppCfg, nFlags):
		return Job(SDK.PrlSrv_StopInstallAppliance(self.handle, conv_handle_arg(hAppCfg), nFlags)[0])

	def get_ct_template_list(self, nFlags):
		return Job(SDK.PrlSrv_GetCtTemplateList(self.handle, nFlags)[0])

	def remove_ct_template(self, sName, sOsTmplName, nFlags):
		return Job(SDK.PrlSrv_RemoveCtTemplate(self.handle, sName, sOsTmplName, nFlags)[0])

	def copy_ct_template(self, sName, sOsTmplName, sTargetServerHostname, nTargetServerPort, sTargetServerSessionUuid, nFlags, nReservedFlags):
		return Job(SDK.PrlSrv_CopyCtTemplate(self.handle, sName, sOsTmplName, sTargetServerHostname, nTargetServerPort, sTargetServerSessionUuid, nFlags, nReservedFlags)[0])

	def is_feature_supported(self, nFeatureId):
		return bool(call_sdk_function('PrlSrv_IsFeatureSupported', self.handle, nFeatureId))

	def add_ipprivate_network(self, hPrivNet, nFlags):
		return Job(SDK.PrlSrv_AddIPPrivateNetwork(self.handle, conv_handle_arg(hPrivNet), nFlags)[0])

	def remove_ipprivate_network(self, hPrivNet, nFlags):
		return Job(SDK.PrlSrv_RemoveIPPrivateNetwork(self.handle, conv_handle_arg(hPrivNet), nFlags)[0])

	def update_ipprivate_network(self, hPrivNet, nFlags):
		return Job(SDK.PrlSrv_UpdateIPPrivateNetwork(self.handle, conv_handle_arg(hPrivNet), nFlags)[0])

	def get_ipprivate_networks_list(self, nFlags):
		return Job(SDK.PrlSrv_GetIPPrivateNetworksList(self.handle, nFlags)[0])

	def refresh_plugins(self, nFlags):
		return Job(SDK.PrlSrv_RefreshPlugins(self.handle, nFlags)[0])

	def get_plugins_list(self, sClassId, nFlags):
		return Job(SDK.PrlSrv_GetPluginsList(self.handle, sClassId, nFlags)[0])

	def login_ex(self, host, user, passwd, sPrevSessionUuid, port_cmd, timeout, security_level, flags):
		return Job(SDK.PrlSrv_LoginEx(self.handle, host, user, passwd, sPrevSessionUuid, port_cmd, timeout, security_level, flags)[0])

	def login_local_ex(self, sPrevSessionUuid, port, security_level, flags):
		return Job(SDK.PrlSrv_LoginLocalEx(self.handle, sPrevSessionUuid, port, security_level, flags)[0])

	def get_disk_free_space(self, sPath, nFlags):
		return Job(SDK.PrlSrv_GetDiskFreeSpace(self.handle, sPath, nFlags)[0])

	def get_vm_config(self, sSearchId, nFlags):
		return Job(SDK.PrlSrv_GetVmConfig(self.handle, sSearchId, nFlags)[0])

	def get_cpupools_list(self):
		return Job(SDK.PrlSrv_GetCPUPoolsList(self.handle)[0])

	def move_to_cpupool(self, sCpuPool):
		return Job(SDK.PrlSrv_MoveToCPUPool(self.handle, sCpuPool)[0])

	def recalculate_cpupool(self, sCpuPool):
		return Job(SDK.PrlSrv_RecalculateCPUPool(self.handle, sCpuPool)[0])

	def send_problem_report(self, hProblemReport, nFlags):
		return Job(SDK.PrlSrv_SendProblemReport(self.handle, conv_handle_arg(hProblemReport), nFlags)[0])

	def get_vcmmd_config(self, nFlags):
		return Job(SDK.PrlSrv_GetVcmmdConfig(self.handle, nFlags)[0])

	def set_vcmmd_config(self, hVcmmdConfig, nFlags):
		return Job(SDK.PrlSrv_SetVcmmdConfig(self.handle, conv_handle_arg(hVcmmdConfig), nFlags)[0])

class FsInfo(_Handle):
	"""
	Contains information about a file system entry and its immediate
	child elements (files and directories) on the host computer.
	"""

	def get_type(self):
		"""
		Determine the basic type of the file system entry. 
		@return: The file system type. Can be L{PFS_WINDOWS_LIKE_FS}, L{PFS_UNIX_LIKE_FS}.
		"""
		return call_sdk_function('PrlFsInfo_GetType', self.handle)

	def get_fs_type(self):
		"""
		Determine the file system type of the file system entry. 
		@return: A Boolean value. True - log level is configured.
		"""
		return call_sdk_function('PrlFsInfo_GetFsType', self.handle)

	def get_child_entries_count(self):
		"""
		Determine the number of child entries for the specified remote file system entry. 
		@return: Integer. The number of child entries.
		"""
		return call_sdk_function('PrlFsInfo_GetChildEntriesCount', self.handle)

	def get_child_entry(self, nIndex):
		"""
		Obtain the L{FsEntry} object containing a child entry information.
		@param  nIndex: Integer. The index of the child entry to get the information for.
		@return: The L{FsEntry} object containing the child entry information.
		"""
		return handle_to_object(call_sdk_function('PrlFsInfo_GetChildEntry', self.handle, nIndex))

	def get_parent_entry(self):
		"""
		Obtain the L{FsEntry} object containing the parent file system entry info.
		"""
		return handle_to_object(call_sdk_function('PrlFsInfo_GetParentEntry', self.handle))

class FsEntry(_Handle):
	"""
	Contains information about a file system entry (disk, directory, file) on the host computer.
	"""

	def get_absolute_path(self):
		"""
		Return the specified file system entry absolute path. 
		@return: A string containing the path.
		"""
		return call_sdk_function('PrlFsEntry_GetAbsolutePath', self.handle)

	def get_relative_name(self):
		"""
		Return the file system entry relative name. 
		@return: A string contaning the name.
		"""
		return call_sdk_function('PrlFsEntry_GetRelativeName', self.handle)

	def get_last_modified_date(self):
		"""
		Return the date on which the specified file system entry was last modified. 
		@return: A string containing the date.
		"""
		return call_sdk_function('PrlFsEntry_GetLastModifiedDate', self.handle)

	def get_size(self):
		"""
		Return the file system entry size. 
		@return: A long containing the size (in bytes).
		"""
		return call_sdk_function('PrlFsEntry_GetSize', self.handle)

	def get_permissions(self):
		"""
		Return the specified file system entry permissions (read, write, execute) for the current user. 
		@return: An integer contaning the permissions. The permissions are specified as bitmasks.
		"""
		return call_sdk_function('PrlFsEntry_GetPermissions', self.handle)

	def get_type(self):
		"""
		Return the file system entry type (file, directory, drive). 
		@return: The entry type. Can be L{PSE_DRIVE}, L{PSE_DIRECTORY}, L{PSE_FILE}.
		"""
		return call_sdk_function('PrlFsEntry_GetType', self.handle)

class ServerConfig(_Handle):
	"""
	Provides methods for obtaining the host computer configuration information.
	"""

	def get_host_ram_size(self):
		"""
		Determine the amount of memory (RAM) available on the host.
		"""
		return call_sdk_function('PrlSrvCfg_GetHostRamSize', self.handle)

	def get_cpu_model(self):
		"""
		Determine the model of CPU of the host machine.
		"""
		return call_sdk_function('PrlSrvCfg_GetCpuModel', self.handle)

	def get_cpu_count(self):
		"""
		Determine the number of CPUs in the host machine.
		"""
		return call_sdk_function('PrlSrvCfg_GetCpuCount', self.handle)

	def get_cpu_speed(self):
		"""
		Determine the host machine CPU speed.
		"""
		return call_sdk_function('PrlSrvCfg_GetCpuSpeed', self.handle)

	def get_cpu_mode(self):
		"""
		Determine the CPU mode (32 bit or 64 bit) of the host machine.
		"""
		return call_sdk_function('PrlSrvCfg_GetCpuMode', self.handle)

	def get_cpu_hvt(self):
		"""
		Determine the hardware virtualization type of the host CPU.
		"""
		return call_sdk_function('PrlSrvCfg_GetCpuHvt', self.handle)

	def get_cpu_features_ex(self):
		return handle_to_object(call_sdk_function('PrlSrvCfg_GetCpuFeaturesEx', self.handle))

	def get_cpu_features_masking_capabilities(self):
		return handle_to_object(call_sdk_function('PrlSrvCfg_GetCpuFeaturesMaskingCapabilities', self.handle))

	def get_host_os_type(self):
		"""
		Return the host operating system type.
		"""
		return call_sdk_function('PrlSrvCfg_GetHostOsType', self.handle)

	def get_host_os_major(self):
		"""
		Return the major version number of the host operating system.
		"""
		return call_sdk_function('PrlSrvCfg_GetHostOsMajor', self.handle)

	def get_host_os_minor(self):
		"""
		Return the minor version number of the host operating system.
		"""
		return call_sdk_function('PrlSrvCfg_GetHostOsMinor', self.handle)

	def get_host_os_sub_minor(self):
		"""
		Return the sub-minor version number of the host operating system.
		"""
		return call_sdk_function('PrlSrvCfg_GetHostOsSubMinor', self.handle)

	def get_host_os_str_presentation(self):
		"""
		Return the full host operating system information as a single string.
		"""
		return call_sdk_function('PrlSrvCfg_GetHostOsStrPresentation', self.handle)

	def is_sound_default_enabled(self):
		"""
		Determine whether a sound device on the host is enabled or disabled.
		"""
		return bool(call_sdk_function('PrlSrvCfg_IsSoundDefaultEnabled', self.handle))

	def is_usb_supported(self):
		"""
		Determine if USB is supported on the host.
		"""
		return bool(call_sdk_function('PrlSrvCfg_IsUsbSupported', self.handle))

	def is_vtd_supported(self):
		"""
		Determine whether VT-d is supported on the host.
		"""
		return bool(call_sdk_function('PrlSrvCfg_IsVtdSupported', self.handle))

	def get_max_host_net_adapters(self):
		return call_sdk_function('PrlSrvCfg_GetMaxHostNetAdapters', self.handle)

	def get_max_vm_net_adapters(self):
		return call_sdk_function('PrlSrvCfg_GetMaxVmNetAdapters', self.handle)

	def get_hostname(self):
		"""
		Return the hostname of the specified host or guest.
		"""
		return call_sdk_function('PrlSrvCfg_GetHostname', self.handle)

	def get_default_gateway(self):
		"""
		Obtain the global default gateway address of the specified host or guest.
		"""
		return call_sdk_function('PrlSrvCfg_GetDefaultGateway', self.handle)

	def get_default_gateway_ipv6(self):
		return call_sdk_function('PrlSrvCfg_GetDefaultGatewayIPv6', self.handle)

	def get_dns_servers(self):
		"""
		Obtain the list of IP addresses of DNS servers for the host or guest.
		"""
		return handle_to_object(call_sdk_function('PrlSrvCfg_GetDnsServers', self.handle))

	def get_search_domains(self):
		"""
		Obtain the list of search domains for the specified host or guest.
		"""
		return handle_to_object(call_sdk_function('PrlSrvCfg_GetSearchDomains', self.handle))

	def get_floppy_disks_count(self):
		"""
		Determine the number of floppy disk drives on the host.
		"""
		return call_sdk_function('PrlSrvCfg_GetFloppyDisksCount', self.handle)

	def get_floppy_disk(self, nIndex):
		"""
		Obtain the L{HostDevice} object containing information about a floppy disk drive on the host.
		"""
		return handle_to_object(call_sdk_function('PrlSrvCfg_GetFloppyDisk', self.handle, nIndex))

	def get_optical_disks_count(self):
		"""
		Determine the number of optical disk drives on the host.
		"""
		return call_sdk_function('PrlSrvCfg_GetOpticalDisksCount', self.handle)

	def get_optical_disk(self, nIndex):
		"""
		Obtain the L{HostDevice} object containing information about an optical disk drive on the host.
		"""
		return handle_to_object(call_sdk_function('PrlSrvCfg_GetOpticalDisk', self.handle, nIndex))

	def get_serial_ports_count(self):
		"""
		Determine the number of serial ports available on the host.
		"""
		return call_sdk_function('PrlSrvCfg_GetSerialPortsCount', self.handle)

	def get_serial_port(self, nIndex):
		"""
		Obtain the L{HostDevice} object containing information about a serial port on the host.
		"""
		return handle_to_object(call_sdk_function('PrlSrvCfg_GetSerialPort', self.handle, nIndex))

	def get_parallel_ports_count(self):
		"""
		Determine the number of parallel ports on the host.
		"""
		return call_sdk_function('PrlSrvCfg_GetParallelPortsCount', self.handle)

	def get_parallel_port(self, nIndex):
		"""
		Obtain the L{HostDevice} object containing information about a parallel port on the host.
		"""
		return handle_to_object(call_sdk_function('PrlSrvCfg_GetParallelPort', self.handle, nIndex))

	def get_sound_output_devs_count(self):
		"""
		Determine the number of sound devices available on the host.
		"""
		return call_sdk_function('PrlSrvCfg_GetSoundOutputDevsCount', self.handle)

	def get_sound_output_dev(self, nIndex):
		"""
		Obtain the L{HostDevice} object containing information about a sound device on the host.
		"""
		return handle_to_object(call_sdk_function('PrlSrvCfg_GetSoundOutputDev', self.handle, nIndex))

	def get_sound_mixer_devs_count(self):
		"""
		Determine the number of sound mixer devices available on the host.
		"""
		return call_sdk_function('PrlSrvCfg_GetSoundMixerDevsCount', self.handle)

	def get_sound_mixer_dev(self, nIndex):
		"""
		Obtain the L{HostDevice} object containing information about a sound mixer device on the host.
		"""
		return handle_to_object(call_sdk_function('PrlSrvCfg_GetSoundMixerDev', self.handle, nIndex))

	def get_printers_count(self):
		"""
		Determine the number of printers installed on the host.
		"""
		return call_sdk_function('PrlSrvCfg_GetPrintersCount', self.handle)

	def get_printer(self, nIndex):
		"""
		Obtain the L{HostDevice} object containing information about a printer installed on the host.
		"""
		return handle_to_object(call_sdk_function('PrlSrvCfg_GetPrinter', self.handle, nIndex))

	def get_generic_pci_devices_count(self):
		"""
		Determine the number of PCI devices installed on the host.
		"""
		return call_sdk_function('PrlSrvCfg_GetGenericPciDevicesCount', self.handle)

	def get_generic_pci_device(self, nIndex):
		"""
		Obtain the L{HostDevice} object containing information about a PCI device installed on the host.
		"""
		return handle_to_object(call_sdk_function('PrlSrvCfg_GetGenericPciDevice', self.handle, nIndex))

	def get_generic_scsi_devices_count(self):
		"""
		Determine the number of generic SCSI devices installed on the host.
		"""
		return call_sdk_function('PrlSrvCfg_GetGenericScsiDevicesCount', self.handle)

	def get_generic_scsi_device(self, nIndex):
		"""
		Obtain the L{HostDevice} object containing information about a generic SCSI device.
		"""
		return handle_to_object(call_sdk_function('PrlSrvCfg_GetGenericScsiDevice', self.handle, nIndex))

	def get_usb_devs_count(self):
		"""
		Determine the number of USB devices on the host.
		"""
		return call_sdk_function('PrlSrvCfg_GetUsbDevsCount', self.handle)

	def get_usb_dev(self, nIndex):
		"""
		Obtain the L{HostDevice} object containing information about a USB device on the host.
		"""
		return handle_to_object(call_sdk_function('PrlSrvCfg_GetUsbDev', self.handle, nIndex))

	def get_hard_disks_count(self):
		"""
		Determine the number of hard disk drives on the host.
		"""
		return call_sdk_function('PrlSrvCfg_GetHardDisksCount', self.handle)

	def get_hard_disk(self, nIndex):
		"""
		Obtain the L{HostHardDisk} object containing information about a hard disks drive on the host.
		"""
		return handle_to_object(call_sdk_function('PrlSrvCfg_GetHardDisk', self.handle, nIndex))

	def get_net_adapters_count(self):
		"""
		Determine the number of network adapters available on the server.
		"""
		return call_sdk_function('PrlSrvCfg_GetNetAdaptersCount', self.handle)

	def get_net_adapter(self, nIndex):
		"""
		Obtain the L{HostNet} object containing information about a network adapter in the host or guest.
		"""
		return handle_to_object(call_sdk_function('PrlSrvCfg_GetNetAdapter', self.handle, nIndex))

class HostDevice(_Handle):
	"""
	A base class providing methods for obtaining information about physical devices on the host computer.
	The descendants of this class provide additional methods specific to a particular device type.
	"""

	def get_name(self):
		"""
		Obtain the device name.
		"""
		return call_sdk_function('PrlSrvCfgDev_GetName', self.handle)

	def get_id(self):
		"""
		Obtain the device ID.
		"""
		return call_sdk_function('PrlSrvCfgDev_GetId', self.handle)

	def get_type(self):
		"""
		Obtain the device type.
		"""
		return call_sdk_function('PrlSrvCfgDev_GetType', self.handle)

	def is_connected_to_vm(self):
		"""
		Determine whether the device is connected to a virtual machine.
		"""
		return bool(call_sdk_function('PrlSrvCfgDev_IsConnectedToVm', self.handle))

	def get_device_state(self):
		"""
		Determine whether a virtual machine can directly use a PCI device through IOMMU technology.
		"""
		return call_sdk_function('PrlSrvCfgDev_GetDeviceState', self.handle)

	def set_device_state(self, nDeviceState):
		"""
		Set whether a virtual machine can directly use a PCI device through IOMMU technology.
		"""
		call_sdk_function('PrlSrvCfgDev_SetDeviceState', self.handle, nDeviceState)

class HostHardDisk(HostDevice):
	"""
	Provides methods for obtaining information about a physical hard disk on the host computer.
	"""

	def get_dev_name(self):
		"""
		Return the hard disk device name.
		"""
		return call_sdk_function('PrlSrvCfgHdd_GetDevName', self.handle)

	def get_dev_id(self):
		"""
		Return the hard disk device id.
		"""
		return call_sdk_function('PrlSrvCfgHdd_GetDevId', self.handle)

	def get_dev_size(self):
		"""
		Return the size of the hard disk device.
		"""
		return call_sdk_function('PrlSrvCfgHdd_GetDevSize', self.handle)

	def get_disk_index(self):
		"""
		Return the index of a hard disk device.
		"""
		return call_sdk_function('PrlSrvCfgHdd_GetDiskIndex', self.handle)

	def get_parts_count(self):
		"""
		Determine the number of partitions available on a hard drive.
		"""
		return call_sdk_function('PrlSrvCfgHdd_GetPartsCount', self.handle)

	def get_part(self, nIndex):
		"""
		Obtain the L{HdPartition} object identifying the specified hard disk partition.
		"""
		return handle_to_object(call_sdk_function('PrlSrvCfgHdd_GetPart', self.handle, nIndex))

class HdPartition(_Handle):
	"""
	Provides methods for obtaining information about a physical hard disk partition on the host computer.
	"""

	def get_name(self):
		"""
		Return the hard disk partition name. 
		@return: String. The partition name.
		"""
		return call_sdk_function('PrlSrvCfgHddPart_GetName', self.handle)

	def get_sys_name(self):
		"""
		Return the hard disk partition system name. 
		@return: String . The partition name.
		"""
		return call_sdk_function('PrlSrvCfgHddPart_GetSysName', self.handle)

	def get_size(self):
		"""
		Return the hard disk partition size. 
		@return: Long. The partition size (in MB).
		"""
		return call_sdk_function('PrlSrvCfgHddPart_GetSize', self.handle)

	def get_index(self):
		"""
		Return the index of the hard disk partition. 
		@return: Integer. The partition index.
		"""
		return call_sdk_function('PrlSrvCfgHddPart_GetIndex', self.handle)

	def get_type(self):
		"""
		Return a numerical code identifying the type of the partition. 
		@return: Integer. Partition type.
		"""
		return call_sdk_function('PrlSrvCfgHddPart_GetType', self.handle)

	def is_in_use(self):
		"""
		Determines whether the partition is in use ( contains valid file system, being used for swap, etc.).
		@return: Boolean. True - partition is in use.  False - partition is not in use.
		"""
		return bool(call_sdk_function('PrlSrvCfgHddPart_IsInUse', self.handle))

	def is_logical(self):
		"""
		Determine whether the specified partition is a logical partition. 
		@return: Boolean. True - partition is logical.  False - partition is physical.
		"""
		return bool(call_sdk_function('PrlSrvCfgHddPart_IsLogical', self.handle))

	def is_active(self):
		"""
		Determine whether the disk partition is active or inactive. 
		@return: Boolean. True - partition is active.  False - partition is not active.
		"""
		return bool(call_sdk_function('PrlSrvCfgHddPart_IsActive', self.handle))

class HostNet(HostDevice):
	"""
	Provides methods for obtaining information about a physical network adapter on the host computer.
	"""

	def get_net_adapter_type(self):
		"""
		Return the network adapter type.
		"""
		return call_sdk_function('PrlSrvCfgNet_GetNetAdapterType', self.handle)

	def get_sys_index(self):
		"""
		Return the network adapter system index.
		"""
		return call_sdk_function('PrlSrvCfgNet_GetSysIndex', self.handle)

	def is_enabled(self):
		"""
		Determine whether the adapter is enabled or disabled.
		"""
		return bool(call_sdk_function('PrlSrvCfgNet_IsEnabled', self.handle))

	def is_configure_with_dhcp(self):
		"""
		Determine whether the adapter network settings are configured through DHCP.
		"""
		return bool(call_sdk_function('PrlSrvCfgNet_IsConfigureWithDhcp', self.handle))

	def is_configure_with_dhcp_ipv6(self):
		return bool(call_sdk_function('PrlSrvCfgNet_IsConfigureWithDhcpIPv6', self.handle))

	def get_default_gateway(self):
		"""
		Obtain the default gateway address for the specified network adapter.
		"""
		return call_sdk_function('PrlSrvCfgNet_GetDefaultGateway', self.handle)

	def get_default_gateway_ipv6(self):
		return call_sdk_function('PrlSrvCfgNet_GetDefaultGatewayIPv6', self.handle)

	def get_mac_address(self):
		"""
		Return the MAC address of the specified network adapter.
		"""
		return call_sdk_function('PrlSrvCfgNet_GetMacAddress', self.handle)

	def get_vlan_tag(self):
		"""
		Return the VLAN tag of the network adapter.
		"""
		return call_sdk_function('PrlSrvCfgNet_GetVlanTag', self.handle)

	def get_net_addresses(self):
		"""
		Obtain the list of network addresses (IP address/Subnet mask pairs) assigned to the network adapter.
		"""
		return handle_to_object(call_sdk_function('PrlSrvCfgNet_GetNetAddresses', self.handle))

	def get_dns_servers(self):
		"""
		Obtain the list of addresses of DNS servers assigned to the specified network adapter.
		"""
		return handle_to_object(call_sdk_function('PrlSrvCfgNet_GetDnsServers', self.handle))

	def get_search_domains(self):
		"""
		Obtain a list of search domains assigned to the specified network adapter.
		"""
		return handle_to_object(call_sdk_function('PrlSrvCfgNet_GetSearchDomains', self.handle))

class HostPciDevice(HostDevice):
	"""
	Provides methods for obtaining information about a PCI device on the host computer.
	"""

	def get_device_class(self):
		return call_sdk_function('PrlSrvCfgPci_GetDeviceClass', self.handle)

	def is_primary_device(self):
		return bool(call_sdk_function('PrlSrvCfgPci_IsPrimaryDevice', self.handle))

class UserConfig(_Handle):
	"""
	Provides methods for obtaining information about the currently logged in user and 
	for setting the user preferences.
	"""

	def get_vm_dir_uuid(self):
		"""
		Return name and path of the default virtual machine folder for the Dispatcher Service.
		"""
		return call_sdk_function('PrlUsrCfg_GetVmDirUuid', self.handle)

	def set_vm_dir_uuid(self, sNewVmDirUuid):
		"""
		Set the default virtual machine directory name and path for the Dispatcher Service.
		"""
		call_sdk_function('PrlUsrCfg_SetVmDirUuid', self.handle, sNewVmDirUuid)

	def get_default_vm_folder(self):
		"""
		Return name and path of the default virtual machine directory for the user.
		"""
		return call_sdk_function('PrlUsrCfg_GetDefaultVmFolder', self.handle)

	def set_default_vm_folder(self, sNewDefaultVmFolder):
		"""
		Set the default virtual machine folder for the user.
		"""
		call_sdk_function('PrlUsrCfg_SetDefaultVmFolder', self.handle, sNewDefaultVmFolder)

	def can_use_mng_console(self):
		"""
		Determine if the user is allowed to use the Dispatcher Service Management Console.
		"""
		return bool(call_sdk_function('PrlUsrCfg_CanUseMngConsole', self.handle))

	def can_change_srv_sets(self):
		"""
		Determine if the current user can modify Dispatcher Service preferences.
		"""
		return bool(call_sdk_function('PrlUsrCfg_CanChangeSrvSets', self.handle))

	def is_local_administrator(self):
		"""
		Determine if the user is a local administrator on the host where Dispatcher Service is running.
		"""
		return bool(call_sdk_function('PrlUsrCfg_IsLocalAdministrator', self.handle))

class UserInfo(_Handle):
	"""
	Provides methods for obtaining information about the specified Dispatcher Service user.
	"""

	def get_name(self):
		"""
		Return the user name.
		"""
		return call_sdk_function('PrlUsrInfo_GetName', self.handle)

	def get_uuid(self):
		"""
		Returns the user Universally Unique Identifier (UUID).
		"""
		return call_sdk_function('PrlUsrInfo_GetUuid', self.handle)

	def get_session_count(self):
		"""
		Return the user active session count.
		"""
		return call_sdk_function('PrlUsrInfo_GetSessionCount', self.handle)

	def get_default_vm_folder(self):
		"""
		Return name and path of the default virtual machine directory for the user.
		"""
		return call_sdk_function('PrlUsrInfo_GetDefaultVmFolder', self.handle)

	def can_change_srv_sets(self):
		"""
		Determine whether the specified user is allowed to modify Dispatcher Service preferences.
		"""
		return bool(call_sdk_function('PrlUsrInfo_CanChangeSrvSets', self.handle))

class DispConfig(_Handle):
	"""
	Provides methods for managing Dispatcher Service preferences.
	"""

	def get_default_vm_dir(self):
		"""
		Obtain name and path of the directory in which new virtual machines are created by default.
		@return: A string containing name and path of the default virtual machine directory.
		"""
		return call_sdk_function('PrlDispCfg_GetDefaultVmDir', self.handle)

	def get_default_ct_dir(self):
		return call_sdk_function('PrlDispCfg_GetDefaultCtDir', self.handle)

	def get_reserved_mem_limit(self):
		"""
		Determine the amount of physical memory reserved for Dispatcher Service operation.
		@return: Integer. The memory size in megabytes.
		"""
		return call_sdk_function('PrlDispCfg_GetReservedMemLimit', self.handle)

	def set_reserved_mem_limit(self, nMemSize):
		"""
		Set the amount of memory that will be allocated for Dispatcher Service operation.
		@param nMemSize: Integer. The memory size in megabytes.
		"""
		call_sdk_function('PrlDispCfg_SetReservedMemLimit', self.handle, nMemSize)

	def get_min_vm_mem(self):
		"""
		Determine the minimum required memory size that must be allocated to an individual virtual machine.
		@return: Integer. The memory size in megabytes.
		"""
		return call_sdk_function('PrlDispCfg_GetMinVmMem', self.handle)

	def set_min_vm_mem(self, nMemSize):
		"""
		Set the minimum required memory size that must be allocated to an individual virtual machine.
		@param nMemSize: Integer. The memory size in megabytes.
		"""
		call_sdk_function('PrlDispCfg_SetMinVmMem', self.handle, nMemSize)

	def get_max_vm_mem(self):
		"""
		Determine the maximum memory size that can be allocated to an individual virtual machine.
		@return: Integer. The memory size in megabytes.
		"""
		return call_sdk_function('PrlDispCfg_GetMaxVmMem', self.handle)

	def set_max_vm_mem(self, nMemSize):
		"""
		Set the maximum memory size that can be allocated to an individual virtual machine.
		@param nMemSize: Integer. The memory size in megabytes.
		"""
		call_sdk_function('PrlDispCfg_SetMaxVmMem', self.handle, nMemSize)

	def get_recommend_max_vm_mem(self):
		"""
		Determine the recommended memory size for an individual virtual machine.
		@return: Integer. The memory size in megabytes.
		"""
		return call_sdk_function('PrlDispCfg_GetRecommendMaxVmMem', self.handle)

	def set_recommend_max_vm_mem(self, nMemSize):
		"""
		Set recommended memory size for an individual virtual machine.
		@param nMemSize: Integer. The memory size in megabytes.
		"""
		call_sdk_function('PrlDispCfg_SetRecommendMaxVmMem', self.handle, nMemSize)

	def get_max_reserv_mem_limit(self):
		"""
		Return the maximum amount of memory that can be reserved for Dispatcher Service operation.
		@return: Integer. The memory size, in megabytes.
		"""
		return call_sdk_function('PrlDispCfg_GetMaxReservMemLimit', self.handle)

	def set_max_reserv_mem_limit(self, nMemSize):
		"""
		Set the upper limit of the memory size that can be reserved for Dispatcher Service operation.
		@param nMemSize: Integer. The memory size in megabytes.
		"""
		call_sdk_function('PrlDispCfg_SetMaxReservMemLimit', self.handle, nMemSize)

	def get_min_reserv_mem_limit(self):
		"""
		Return the minimum amount of physical memory that must be reserved for Dispatcher Service operation.
		@return: Integer. The memory size in megabytes.
		"""
		return call_sdk_function('PrlDispCfg_GetMinReservMemLimit', self.handle)

	def set_min_reserv_mem_limit(self, nMemSize):
		"""
		Set the lower limit of the memory size that must be reserved for Dispatcher Service operation.
		@param nMemSize: Integer. The memory size in megabytes.
		"""
		call_sdk_function('PrlDispCfg_SetMinReservMemLimit', self.handle, nMemSize)

	def is_adjust_mem_auto(self):
		"""
		Determine whether memory allocation for Dispatcher Service is performed automatically or manually.
		@return: Boolean. True -- automatic memory allocation. False --  manual allocation.
		"""
		return bool(call_sdk_function('PrlDispCfg_IsAdjustMemAuto', self.handle))

	def set_adjust_mem_auto(self, bAdjustMemAuto):
		"""
		Set the Dispatcher Service memory allocation mode (automatic or manual).
		@param  bAdjustMemAuto: Boolean. Set to True for automatic mode. Set to False for manual mode.
		"""
		call_sdk_function('PrlDispCfg_SetAdjustMemAuto', self.handle, bAdjustMemAuto)

	def is_send_statistic_report(self):
		"""
		Determine whether the statistics reports (CEP) mechanism is activated. 
		@return: A Boolean value. True - CEP is activated. False - deactivated.
		"""
		return bool(call_sdk_function('PrlDispCfg_IsSendStatisticReport', self.handle))

	def set_send_statistic_report(self, bSendStatisticReport):
		"""
		Turn on/off the mechanism of sending statistics reports (CEP). 
		@param  bSendStatisticReport: Boolean. Set to True to turn the CEP on. Set to False to turn it off.
		"""
		call_sdk_function('PrlDispCfg_SetSendStatisticReport', self.handle, bSendStatisticReport)

	def get_default_vnchost_name(self):
		"""
		Return the default VNC host name for the Dispatcher Service.
		@return: A string containing the VNC host name.
		"""
		return call_sdk_function('PrlDispCfg_GetDefaultVNCHostName', self.handle)

	def set_default_vnchost_name(self, sNewHostName):
		"""
		Set the base VNC host name.
		@param sNewHostName: String. The VNC host name to set.
		"""
		call_sdk_function('PrlDispCfg_SetDefaultVNCHostName', self.handle, sNewHostName)

	def get_vncbase_port(self):
		"""
		Obtain the currently set base VNC port number.
		@return: Integer. The port number.
		"""
		return call_sdk_function('PrlDispCfg_GetVNCBasePort', self.handle)

	def set_vncbase_port(self, nPort):
		"""
		Set the base VNC port number.
		@param nPort: Integer. Port number.
		"""
		call_sdk_function('PrlDispCfg_SetVNCBasePort', self.handle, nPort)

	def get_vncmax_port(self):
		return call_sdk_function('PrlDispCfg_GetVNCMaxPort', self.handle)

	def can_change_default_settings(self):
		"""
		Determine if new users have the right to modify Dispatcher Service preferences.
		@return: Boolean. True indicates that new users can modify preferences. False indicates otherwise.
		"""
		return bool(call_sdk_function('PrlDispCfg_CanChangeDefaultSettings', self.handle))

	def set_can_change_default_settings(self, bDefaultChangeSettings):
		"""
		Grant or deny a permission to new users to modify Dispatcher Service preferences.
		@param bDefaultChangeSettings: Boolean. Set to True to grant the permission. Set to False to deny it.
		"""
		call_sdk_function('PrlDispCfg_SetCanChangeDefaultSettings', self.handle, bDefaultChangeSettings)

	def get_min_security_level(self):
		"""
		Determine the lowest allowable security level that can be used to connect to the Dispatcher Service.
		@return: One of the following constants:
		PSL_LOW_SECURITY -- Plain TCP/IP (no encryption).
		PSL_NORMAL_SECURITY -- important data is sent and received using SSL.
		PSL_HIGH_SECURITY -- all data is sent and received using SSL.
		"""
		return call_sdk_function('PrlDispCfg_GetMinSecurityLevel', self.handle)

	def set_min_security_level(self, nMinSecurityLevel):
		"""
		Set the lowest allowable security level that can be used to connect to the Dispatcher Service.
		@param nMinSecurityLevel: Security level to set. Can be one of the following constants:
		PSL_LOW_SECURITY -- Plain TCP/IP (no encryption).
		PSL_NORMAL_SECURITY -- important data is sent and received using SSL.
		PSL_HIGH_SECURITY -- all data is sent and received using SSL.
		"""
		call_sdk_function('PrlDispCfg_SetMinSecurityLevel', self.handle, nMinSecurityLevel)

	def get_confirmations_list(self):
		"""
		Obtain a list of operations that require administrator confirmation.
		"""
		return handle_to_object(call_sdk_function('PrlDispCfg_GetConfirmationsList', self.handle))

	def set_confirmations_list(self, hConfirmList):
		"""
		Set the list of operations that require administrator confirmation.
		"""
		call_sdk_function('PrlDispCfg_SetConfirmationsList', self.handle, conv_handle_arg(hConfirmList))

	def get_default_backup_server(self):
		"""
		Return the default backup server host name or IP address. 
		@return: A string containing the backup server host name of IP address.
		"""
		return call_sdk_function('PrlDispCfg_GetDefaultBackupServer', self.handle)

	def set_default_backup_server(self, sBackupServer):
		"""
		Set the default backup server host name or IP address. 
		@param  sBackupServer: String. The default backup server host name or IP address.
		"""
		call_sdk_function('PrlDispCfg_SetDefaultBackupServer', self.handle, sBackupServer)

	def get_backup_user_login(self):
		"""
		Return the backup user login name.
		@return: A string containing the name.
		"""
		return call_sdk_function('PrlDispCfg_GetBackupUserLogin', self.handle)

	def set_backup_user_login(self, sUserLogin):
		"""
		Set the backup user login. 
		@param  sUserLogin: String. The backup user login name to set.
		"""
		call_sdk_function('PrlDispCfg_SetBackupUserLogin', self.handle, sUserLogin)

	def set_backup_user_password(self, sUserPassword):
		"""
		Set the backup user password.
		@param   sUserPassword: String. The backup user password to set.
		"""
		call_sdk_function('PrlDispCfg_SetBackupUserPassword', self.handle, sUserPassword)

	def is_backup_user_password_enabled(self):
		"""
		Determine if the backup user password is enabled. 
		@return: A Boolean value. True - backup user password is enabled. False - password is disabled.
		"""
		return bool(call_sdk_function('PrlDispCfg_IsBackupUserPasswordEnabled', self.handle))

	def set_backup_user_password_enabled(self, bUserPasswordEnabled):
		"""
		Enable or disable the backup user password.
		@param   bUserPasswordEnabled: Boolean. Set to True to enable the password. Set to False to diable it.
		"""
		call_sdk_function('PrlDispCfg_SetBackupUserPasswordEnabled', self.handle, bUserPasswordEnabled)

	def get_default_backup_directory(self):
		"""
		Return the name and path of the default backup directory. 
		@return: A string containing the directory name and path.
		"""
		return call_sdk_function('PrlDispCfg_GetDefaultBackupDirectory', self.handle)

	def set_default_backup_directory(self, sBackupDirectory):
		"""
		Set name and path of the default backup directory.
		"""
		call_sdk_function('PrlDispCfg_SetDefaultBackupDirectory', self.handle, sBackupDirectory)

	def get_backup_timeout(self):
		return call_sdk_function('PrlDispCfg_GetBackupTimeout', self.handle)

	def set_backup_timeout(self, nTimeout):
		call_sdk_function('PrlDispCfg_SetBackupTimeout', self.handle, nTimeout)

	def are_plugins_enabled(self):
		return bool(call_sdk_function('PrlDispCfg_ArePluginsEnabled', self.handle))

	def enable_plugins(self, bEnablePluginsSupport):
		call_sdk_function('PrlDispCfg_EnablePlugins', self.handle, bEnablePluginsSupport)

	def get_vm_cpu_limit_type(self):
		return call_sdk_function('PrlDispCfg_GetVmCpuLimitType', self.handle)

	def set_vm_cpu_limit_type(self, nVmCpuLimitType):
		call_sdk_function('PrlDispCfg_SetVmCpuLimitType', self.handle, nVmCpuLimitType)

	def is_verbose_log_enabled(self):
		"""
		Determine whether the verbose log level is configured for dispatcher and virtual machines processes.
		@return: A Boolean value. True - log level is configured. False - log level is not configured.
		"""
		return bool(call_sdk_function('PrlDispCfg_IsVerboseLogEnabled', self.handle))

	def set_verbose_log_enabled(self, bEnabled):
		"""
		Enable or disable the verbose log level for dispatcher and virtual machines processes.
		"""
		call_sdk_function('PrlDispCfg_SetVerboseLogEnabled', self.handle, bEnabled)

	def is_allow_multiple_pmc(self):
		return bool(call_sdk_function('PrlDispCfg_IsAllowMultiplePMC', self.handle))

	def set_allow_multiple_pmc(self, bEnabled):
		call_sdk_function('PrlDispCfg_SetAllowMultiplePMC', self.handle, bEnabled)

	def is_log_rotation_enabled(self):
		return bool(call_sdk_function('PrlDispCfg_IsLogRotationEnabled', self.handle))

	def set_log_rotation_enabled(self, bEnabled):
		call_sdk_function('PrlDispCfg_SetLogRotationEnabled', self.handle, bEnabled)

	def get_cpu_features_mask_ex(self):
		return handle_to_object(call_sdk_function('PrlDispCfg_GetCpuFeaturesMaskEx', self.handle))

	def set_cpu_features_mask_ex(self, hCpuFeatures):
		call_sdk_function('PrlDispCfg_SetCpuFeaturesMaskEx', self.handle, conv_handle_arg(hCpuFeatures))

	def get_usb_identity_count(self):
		return call_sdk_function('PrlDispCfg_GetUsbIdentityCount', self.handle)

	def get_usb_identity(self, nUsbIdentIndex):
		return handle_to_object(call_sdk_function('PrlDispCfg_GetUsbIdentity', self.handle, nUsbIdentIndex))

	def set_usb_ident_association(self, sSystemName, sVmUuid, nFlags):
		call_sdk_function('PrlDispCfg_SetUsbIdentAssociation', self.handle, sSystemName, sVmUuid, nFlags)

	def get_cpu_pool(self):
		return handle_to_object(call_sdk_function('PrlDispCfg_GetCpuPool', self.handle))

class VirtualNet(_Handle):
	"""
	Provides methods for managing virtual networks.
	"""

	def __init__(self, handle = consts.PRL_INVALID_HANDLE):
		self.handle = handle
		if self.handle == consts.PRL_INVALID_HANDLE:
			self.handle = call_sdk_function('PrlVirtNet_Create')
		_Handle.__init__(self, self.handle)

	def create(self):
		"""
		Creates a new instance of L{VirtualNet}.
		"""
		return handle_to_object(call_sdk_function('PrlVirtNet_Create'))

	def get_network_id(self):
		"""
		Return the ID of the specified virtual network.
		"""
		return call_sdk_function('PrlVirtNet_GetNetworkId', self.handle)

	def set_network_id(self, sNetworkId):
		"""
		Set the virtual network ID.
		"""
		call_sdk_function('PrlVirtNet_SetNetworkId', self.handle, sNetworkId)

	def get_description(self):
		"""
		Return the description of the specified virtual network.
		"""
		return call_sdk_function('PrlVirtNet_GetDescription', self.handle)

	def set_description(self, sDescription):
		"""
		Sets the virtual network description.
		"""
		call_sdk_function('PrlVirtNet_SetDescription', self.handle, sDescription)

	def get_network_type(self):
		"""
		Return the virtual network type.
		"""
		return call_sdk_function('PrlVirtNet_GetNetworkType', self.handle)

	def set_network_type(self, nNetworkType):
		"""
		Set the virtual network type.
		"""
		call_sdk_function('PrlVirtNet_SetNetworkType', self.handle, nNetworkType)

	def get_bound_card_mac(self):
		"""
		Return the bound card MAC address of the specified virtual network.
		"""
		return call_sdk_function('PrlVirtNet_GetBoundCardMac', self.handle)

	def set_bound_card_mac(self, sBoundCardMac):
		"""
		Sets the specified virtual network bound card MAC address.
		"""
		call_sdk_function('PrlVirtNet_SetBoundCardMac', self.handle, sBoundCardMac)

	def get_adapter_name(self):
		"""
		Return the name of the network adapter in the specified virtual network.
		"""
		return call_sdk_function('PrlVirtNet_GetAdapterName', self.handle)

	def set_adapter_name(self, sAdapterName):
		"""
		Sets the specified virtual network adapter name.
		"""
		call_sdk_function('PrlVirtNet_SetAdapterName', self.handle, sAdapterName)

	def get_adapter_index(self):
		"""
		Return a numeric index assigned to the network adapter in the specified virtual network.
		"""
		return call_sdk_function('PrlVirtNet_GetAdapterIndex', self.handle)

	def set_adapter_index(self, nAdapterIndex):
		"""
		Sets the specified adapter index.
		"""
		call_sdk_function('PrlVirtNet_SetAdapterIndex', self.handle, nAdapterIndex)

	def get_host_ipaddress(self):
		"""
		Return the host IP address of the specified virtual network.
		"""
		return call_sdk_function('PrlVirtNet_GetHostIPAddress', self.handle)

	def set_host_ipaddress(self, sHostIPAddress):
		"""
		Set the virtual network host IP address.
		"""
		call_sdk_function('PrlVirtNet_SetHostIPAddress', self.handle, sHostIPAddress)

	def get_host_ip6address(self):
		return call_sdk_function('PrlVirtNet_GetHostIP6Address', self.handle)

	def set_host_ip6address(self, sHostIPAddress):
		call_sdk_function('PrlVirtNet_SetHostIP6Address', self.handle, sHostIPAddress)

	def get_dhcp_ipaddress(self):
		"""
		Return the DHCP IP address of the specified virtual network.
		"""
		return call_sdk_function('PrlVirtNet_GetDhcpIPAddress', self.handle)

	def set_dhcp_ipaddress(self, sDhcpIPAddress):
		"""
		Set the virtual network DHCP IP address.
		"""
		call_sdk_function('PrlVirtNet_SetDhcpIPAddress', self.handle, sDhcpIPAddress)

	def get_dhcp_ip6address(self):
		return call_sdk_function('PrlVirtNet_GetDhcpIP6Address', self.handle)

	def set_dhcp_ip6address(self, sDhcpIPAddress):
		call_sdk_function('PrlVirtNet_SetDhcpIP6Address', self.handle, sDhcpIPAddress)

	def get_ipnet_mask(self):
		"""
		Return the IP net mask of the specified virtual network.
		"""
		return call_sdk_function('PrlVirtNet_GetIPNetMask', self.handle)

	def set_ipnet_mask(self, sIPNetMask):
		"""
		Set the virtual network IP net mask.
		"""
		call_sdk_function('PrlVirtNet_SetIPNetMask', self.handle, sIPNetMask)

	def get_ip6net_mask(self):
		return call_sdk_function('PrlVirtNet_GetIP6NetMask', self.handle)

	def set_ip6net_mask(self, sIPNetMask):
		call_sdk_function('PrlVirtNet_SetIP6NetMask', self.handle, sIPNetMask)

	def get_vlan_tag(self):
		"""
		Return the VLAN tag of the specified virtual network.
		"""
		return call_sdk_function('PrlVirtNet_GetVlanTag', self.handle)

	def set_vlan_tag(self, nVlanTag):
		"""
		Set the VLAN tag for the virtual network.
		"""
		call_sdk_function('PrlVirtNet_SetVlanTag', self.handle, nVlanTag)

	def get_ipscope_start(self):
		"""
		Returns the DHCP starting IP address of the specified virtual network.
		"""
		return call_sdk_function('PrlVirtNet_GetIPScopeStart', self.handle)

	def set_ipscope_start(self, sIPScopeStart):
		"""
		Set the virtual network DHCP starting IP address.
		"""
		call_sdk_function('PrlVirtNet_SetIPScopeStart', self.handle, sIPScopeStart)

	def get_ipscope_end(self):
		"""
		Return the DHCP ending IP address of the specified virtual network.
		"""
		return call_sdk_function('PrlVirtNet_GetIPScopeEnd', self.handle)

	def set_ipscope_end(self, sIPScopeEnd):
		"""
		Set the virtual network DHCP ending IP address
		"""
		call_sdk_function('PrlVirtNet_SetIPScopeEnd', self.handle, sIPScopeEnd)

	def get_ip6scope_start(self):
		return call_sdk_function('PrlVirtNet_GetIP6ScopeStart', self.handle)

	def set_ip6scope_start(self, sIPScopeStart):
		call_sdk_function('PrlVirtNet_SetIP6ScopeStart', self.handle, sIPScopeStart)

	def get_ip6scope_end(self):
		return call_sdk_function('PrlVirtNet_GetIP6ScopeEnd', self.handle)

	def set_ip6scope_end(self, sIPScopeEnd):
		call_sdk_function('PrlVirtNet_SetIP6ScopeEnd', self.handle, sIPScopeEnd)

	def is_enabled(self):
		"""
		Determine whether the virtual network is enabled or disabled.
		"""
		return bool(call_sdk_function('PrlVirtNet_IsEnabled', self.handle))

	def set_enabled(self, bEnabled):
		"""
		Enable or disable the virtual network.
		"""
		call_sdk_function('PrlVirtNet_SetEnabled', self.handle, bEnabled)

	def is_adapter_enabled(self):
		"""
		Determine whether the virtual network adapter is enabled or disabled.
		"""
		return bool(call_sdk_function('PrlVirtNet_IsAdapterEnabled', self.handle))

	def set_adapter_enabled(self, bEnabled):
		"""
		Enable or disable a virtual network adapter.
		"""
		call_sdk_function('PrlVirtNet_SetAdapterEnabled', self.handle, bEnabled)

	def is_dhcpserver_enabled(self):
		"""
		Determine whether the virtual network DHCP server is enabled or disabled.
		"""
		return bool(call_sdk_function('PrlVirtNet_IsDHCPServerEnabled', self.handle))

	def set_dhcpserver_enabled(self, bEnabled):
		"""
		Enable or disable the virtual network DHCP server.
		"""
		call_sdk_function('PrlVirtNet_SetDHCPServerEnabled', self.handle, bEnabled)

	def is_dhcp6server_enabled(self):
		return bool(call_sdk_function('PrlVirtNet_IsDHCP6ServerEnabled', self.handle))

	def set_dhcp6server_enabled(self, bEnabled):
		call_sdk_function('PrlVirtNet_SetDHCP6ServerEnabled', self.handle, bEnabled)

	def is_natserver_enabled(self):
		"""
		Determine whether the specified virtual network NAT server is enabled or disabled.
		"""
		return bool(call_sdk_function('PrlVirtNet_IsNATServerEnabled', self.handle))

	def set_natserver_enabled(self, bEnabled):
		"""
		Enable or disable the virtual network NAT server.
		"""
		call_sdk_function('PrlVirtNet_SetNATServerEnabled', self.handle, bEnabled)

	def get_port_forward_list(self, nPortFwdType):
		"""
		Return the port forward entries list.
		"""
		return handle_to_object(call_sdk_function('PrlVirtNet_GetPortForwardList', self.handle, nPortFwdType))

	def set_port_forward_list(self, nPortFwdType, hPortFwdList):
		"""
		Set the port forward entries list.
		"""
		call_sdk_function('PrlVirtNet_SetPortForwardList', self.handle, nPortFwdType, conv_handle_arg(hPortFwdList))

	def get_bound_adapter_info(self, hSrvConfig):
		"""
		Obtain info about a physical adapter, which is bound to the virtual network object.
		"""
		return handle_to_object(call_sdk_function('PrlVirtNet_GetBoundAdapterInfo', self.handle, conv_handle_arg(hSrvConfig)))

class PortForward(_Handle):
	"""
	Provides access to the Port Forwarding functionality.
	Using this functionality, you can redirect all incoming data from a specific TCP port on the host
	computer to a specified port in a specified virtual machine.
	"""

	def __init__(self, handle = consts.PRL_INVALID_HANDLE):
		self.handle = handle
		if self.handle == consts.PRL_INVALID_HANDLE:
			self.handle = call_sdk_function('PrlPortFwd_Create')
		_Handle.__init__(self, self.handle)

	def create(self):
		"""
		Create a new instance of the L{PortForward} class.
		"""
		return handle_to_object(call_sdk_function('PrlPortFwd_Create'))

	def get_rule_name(self):
		return call_sdk_function('PrlPortFwd_GetRuleName', self.handle)

	def set_rule_name(self, sRuleName):
		call_sdk_function('PrlPortFwd_SetRuleName', self.handle, sRuleName)

	def get_incoming_port(self):
		"""
		Return the incoming port.
		"""
		return call_sdk_function('PrlPortFwd_GetIncomingPort', self.handle)

	def set_incoming_port(self, nIncomingPort):
		"""
		Set the specified incoming port.
		"""
		call_sdk_function('PrlPortFwd_SetIncomingPort', self.handle, nIncomingPort)

	def get_redirect_ipaddress(self):
		"""
		Return the redirect IP address of the specified port forward entry.
		"""
		return call_sdk_function('PrlPortFwd_GetRedirectIPAddress', self.handle)

	def set_redirect_ipaddress(self, sRedirectIPAddress):
		"""
		Set the specified port forward entry redirect IP address.
		"""
		call_sdk_function('PrlPortFwd_SetRedirectIPAddress', self.handle, sRedirectIPAddress)

	def get_redirect_port(self):
		"""
		Return the redirect port.
		"""
		return call_sdk_function('PrlPortFwd_GetRedirectPort', self.handle)

	def set_redirect_port(self, nRedirectPort):
		"""
		Set the specified redirect port.
		"""
		call_sdk_function('PrlPortFwd_SetRedirectPort', self.handle, nRedirectPort)

	def get_redirect_vm(self):
		return call_sdk_function('PrlPortFwd_GetRedirectVm', self.handle)

	def set_redirect_vm(self, sRedirectVm):
		call_sdk_function('PrlPortFwd_SetRedirectVm', self.handle, sRedirectVm)

class VmDevice(_Handle):
	"""
	A base class providing methods for virtual device management.
	"""

	def create(self, nDeviceType):
		"""
		Create a new virtual device object not bound to any virtual machine.
		"""
		return handle_to_object(call_sdk_function('PrlVmDev_Create', nDeviceType))

	def connect(self):
		"""
		Connect a virtual device to a running virtual machine.
		"""
		return Job(SDK.PrlVmDev_Connect(self.handle)[0])

	def disconnect(self):
		"""
		Disconnect a device from a running virtual machine.
		"""
		return Job(SDK.PrlVmDev_Disconnect(self.handle)[0])

	def create_image(self, bRecreateIsAllowed = False, bNonInteractiveMode = True):
		"""
		Physically create a virtual device image on the host.
		"""
		return Job(SDK.PrlVmDev_CreateImage(self.handle, bRecreateIsAllowed, bNonInteractiveMode)[0])

	def copy_image(self, sNewImageName, sTargetPath, nFlags):
		return Job(SDK.PrlVmDev_CopyImage(self.handle, sNewImageName, sTargetPath, nFlags)[0])

	def resize_image(self, nNewSize, nFlags):
		"""
		Resize the virtual device image.
		"""
		return Job(SDK.PrlVmDev_ResizeImage(self.handle, nNewSize, nFlags)[0])

	def get_index(self):
		"""
		Return the index identifying the virtual device.
		"""
		return call_sdk_function('PrlVmDev_GetIndex', self.handle)

	def set_index(self, nIndex):
		"""
		Set theindex identifying the virtual device.
		"""
		call_sdk_function('PrlVmDev_SetIndex', self.handle, nIndex)

	def remove(self):
		"""
		Remove the virtual device object from the parent virtual machine list.
		"""
		call_sdk_function('PrlVmDev_Remove', self.handle)

	def get_type(self):
		"""
		Return the virtual device type.
		"""
		return call_sdk_function('PrlVmDev_GetType', self.handle)

	def is_connected(self):
		"""
		Determine if the virtual device is connected.
		"""
		return bool(call_sdk_function('PrlVmDev_IsConnected', self.handle))

	def set_connected(self, bConnected):
		"""
		Connect the virtual device.
		"""
		call_sdk_function('PrlVmDev_SetConnected', self.handle, bConnected)

	def is_enabled(self):
		"""
		Determine if the device is enabled.
		"""
		return bool(call_sdk_function('PrlVmDev_IsEnabled', self.handle))

	def set_enabled(self, bEnabled):
		"""
		Enable the specified virtual device.
		"""
		call_sdk_function('PrlVmDev_SetEnabled', self.handle, bEnabled)

	def is_remote(self):
		"""
		Determine if the virtual device is a remote device.
		"""
		return bool(call_sdk_function('PrlVmDev_IsRemote', self.handle))

	def set_remote(self, bRemote):
		"""
		Change the 'remote' flag for the specified device.
		"""
		call_sdk_function('PrlVmDev_SetRemote', self.handle, bRemote)

	def get_emulated_type(self):
		"""
		Return the virtual device emulation type.
		"""
		return call_sdk_function('PrlVmDev_GetEmulatedType', self.handle)

	def set_emulated_type(self, nEmulatedType):
		"""
		Sets the virtual device emulation type.
		"""
		call_sdk_function('PrlVmDev_SetEmulatedType', self.handle, nEmulatedType)

	def get_image_path(self):
		"""
		Return virtual device image path.
		"""
		return call_sdk_function('PrlVmDev_GetImagePath', self.handle)

	def set_image_path(self, sNewImagePath):
		"""
		Set the virtual device image path.
		"""
		call_sdk_function('PrlVmDev_SetImagePath', self.handle, sNewImagePath)

	def get_sys_name(self):
		"""
		Return the virtual device system name.
		"""
		return call_sdk_function('PrlVmDev_GetSysName', self.handle)

	def set_sys_name(self, sNewSysName):
		"""
		Set the virtual device system name.
		"""
		call_sdk_function('PrlVmDev_SetSysName', self.handle, sNewSysName)

	def get_friendly_name(self):
		"""
		Return the virtual device user-friendly name.
		"""
		return call_sdk_function('PrlVmDev_GetFriendlyName', self.handle)

	def set_friendly_name(self, sNewFriendlyName):
		"""
		Set the virtual device user-friendly name.
		"""
		call_sdk_function('PrlVmDev_SetFriendlyName', self.handle, sNewFriendlyName)

	def get_description(self):
		"""
		Return the description of a virtual device.
		"""
		return call_sdk_function('PrlVmDev_GetDescription', self.handle)

	def set_description(self, sNewDescription):
		"""
		Set the device description.
		"""
		call_sdk_function('PrlVmDev_SetDescription', self.handle, sNewDescription)

	def get_iface_type(self):
		"""
		Return the virtual device interface type (IDE or SCSI).
		"""
		return call_sdk_function('PrlVmDev_GetIfaceType', self.handle)

	def set_iface_type(self, nIfaceType):
		"""
		Set the virtual device interface type (IDE or SCSI).
		"""
		call_sdk_function('PrlVmDev_SetIfaceType', self.handle, nIfaceType)

	def get_sub_type(self):
		return call_sdk_function('PrlVmDev_GetSubType', self.handle)

	def set_sub_type(self, nSubType):
		call_sdk_function('PrlVmDev_SetSubType', self.handle, nSubType)

	def get_stack_index(self):
		"""
		Return the virtual device stack index (position at the IDE/SCSI controller bus).
		"""
		return call_sdk_function('PrlVmDev_GetStackIndex', self.handle)

	def set_stack_index(self, nStackIndex):
		"""
		Set the virtual device stack index (position at the IDE or SCSI controller bus).
		"""
		call_sdk_function('PrlVmDev_SetStackIndex', self.handle, nStackIndex)

	def set_default_stack_index(self):
		"""
		Generates a stack index for the device (the device interface, IDE or SCSI, must be set in advance).
		"""
		call_sdk_function('PrlVmDev_SetDefaultStackIndex', self.handle)

	def get_output_file(self):
		"""
		Return the virtual device output file.
		"""
		return call_sdk_function('PrlVmDev_GetOutputFile', self.handle)

	def set_output_file(self, sNewOutputFile):
		"""
		Set the virtual device output file.
		"""
		call_sdk_function('PrlVmDev_SetOutputFile', self.handle, sNewOutputFile)

	def is_passthrough(self):
		"""
		Determine if the passthrough mode is enabled for the mass storage device.
		"""
		return bool(call_sdk_function('PrlVmDev_IsPassthrough', self.handle))

	def set_passthrough(self, bPassthrough):
		"""
		Enable the passthrough mode for the mass storage device (optical or hard disk).
		"""
		call_sdk_function('PrlVmDev_SetPassthrough', self.handle, bPassthrough)

class VmHardDisk(VmDevice):
	"""
	Provides methods for managing virtual hard disks in a virtual machine.
	"""

	def get_disk_type(self):
		"""
		Return the hard disk type.
		"""
		return call_sdk_function('PrlVmDevHd_GetDiskType', self.handle)

	def set_disk_type(self, nDiskType):
		"""
		Set the type of the virtual hard disk.
		"""
		call_sdk_function('PrlVmDevHd_SetDiskType', self.handle, nDiskType)

	def is_splitted(self):
		"""
		Determine if the virtual hard disk is split into multiple files.
		"""
		return bool(call_sdk_function('PrlVmDevHd_IsSplitted', self.handle))

	def set_splitted(self, bSplitted):
		"""
		Sety whether the hard disk should be split into multiple files.
		"""
		call_sdk_function('PrlVmDevHd_SetSplitted', self.handle, bSplitted)

	def get_disk_size(self):
		"""
		Return the hard disk size.
		"""
		return call_sdk_function('PrlVmDevHd_GetDiskSize', self.handle)

	def set_disk_size(self, nDiskSize):
		"""
		Set the size of the virtual hard disk.
		"""
		call_sdk_function('PrlVmDevHd_SetDiskSize', self.handle, nDiskSize)

	def get_size_on_disk(self):
		"""
		Return the size of the occupied space on the hard disk.
		"""
		return call_sdk_function('PrlVmDevHd_GetSizeOnDisk', self.handle)

	def add_partition(self):
		"""
		Assign a boot camp partition to the virtual hard disk.
		"""
		return handle_to_object(call_sdk_function('PrlVmDevHd_AddPartition', self.handle))

	def get_partitions_count(self):
		"""
		Determine the number of partitions on the virtual hard disk.
		"""
		return call_sdk_function('PrlVmDevHd_GetPartitionsCount', self.handle)

	def get_partition(self, nIndex):
		"""
		Obtain the L{VmHdPartition} object containing a hard disk partition info.
		"""
		return handle_to_object(call_sdk_function('PrlVmDevHd_GetPartition', self.handle, nIndex))

	def set_mount_point(self, sMountPoint):
		call_sdk_function('PrlVmDevHd_SetMountPoint', self.handle, sMountPoint)

	def get_mount_point(self):
		return call_sdk_function('PrlVmDevHd_GetMountPoint', self.handle)

	def set_auto_compress_enabled(self, bEnabled):
		call_sdk_function('PrlVmDevHd_SetAutoCompressEnabled', self.handle, bEnabled)

	def is_auto_compress_enabled(self):
		return bool(call_sdk_function('PrlVmDevHd_IsAutoCompressEnabled', self.handle))

	def set_storage_url(self, sURL):
		call_sdk_function('PrlVmDevHd_SetStorageURL', self.handle, sURL)

	def get_storage_url(self):
		return call_sdk_function('PrlVmDevHd_GetStorageURL', self.handle)

	def get_encryption(self):
		return handle_to_object(call_sdk_function('PrlVmDevHd_GetEncryption', self.handle))

	def set_encryption(self, hEncryption):
		call_sdk_function('PrlVmDevHd_SetEncryption', self.handle, conv_handle_arg(hEncryption))

	def get_serial_number(self):
		"""
		Return serial number of the virtual hard disk.
		"""
		return call_sdk_function('PrlVmDevHd_GetSerialNumber', self.handle)

	def set_serial_number(self, sSerialNumber):
		"""
		Set serial number of the virtual hard disk.
		"""
		call_sdk_function('PrlVmDevHd_SetSerialNumber', self.handle, sSerialNumber)

class VmHdPartition(_Handle):
	"""
	Provides methods for managing partitions of a virtual hard disk in a virtual machine.
	"""

	def remove(self):
		"""
		Remove the specified partition object from the virtual hard disk list.
		"""
		call_sdk_function('PrlVmDevHdPart_Remove', self.handle)

	def get_sys_name(self):
		"""
		Return the hard disk partition system name.
		"""
		return call_sdk_function('PrlVmDevHdPart_GetSysName', self.handle)

	def set_sys_name(self, sSysName):
		"""
		Set system name for the disk partition.
		"""
		call_sdk_function('PrlVmDevHdPart_SetSysName', self.handle, sSysName)

class VmHdEncryption(_Handle):

	def get_key_id(self):
		return call_sdk_function('PrlVmDevHdEncryption_GetKeyId', self.handle)

	def set_key_id(self, sKeyId):
		call_sdk_function('PrlVmDevHdEncryption_SetKeyId', self.handle, sKeyId)

class VmNet(VmDevice):
	"""
	Provides methods for managing network adapters in a virtual machine.
	"""

	def get_bound_adapter_index(self):
		"""
		Return the index of the adapter to which this virtual adapter is bound.
		"""
		return call_sdk_function('PrlVmDevNet_GetBoundAdapterIndex', self.handle)

	def set_bound_adapter_index(self, nIndex):
		"""
		Set the index of the adapter to which this virtual adapter should be bound.
		"""
		call_sdk_function('PrlVmDevNet_SetBoundAdapterIndex', self.handle, nIndex)

	def get_bound_adapter_name(self):
		"""
		Return the name of the adapter to which this virtual adapter is bound.
		"""
		return call_sdk_function('PrlVmDevNet_GetBoundAdapterName', self.handle)

	def set_bound_adapter_name(self, sNewBoundAdapterName):
		"""
		Set the name of the network adapter to which this virtual adapter will bind.
		"""
		call_sdk_function('PrlVmDevNet_SetBoundAdapterName', self.handle, sNewBoundAdapterName)

	def get_mac_address(self):
		"""
		Return the MAC address of the virtual network adapter.
		"""
		return call_sdk_function('PrlVmDevNet_GetMacAddress', self.handle)

	def get_mac_address_canonical(self):
		return call_sdk_function('PrlVmDevNet_GetMacAddressCanonical', self.handle)

	def set_mac_address(self, sNewMacAddress):
		"""
		Set MAC address to the network adapter.
		"""
		call_sdk_function('PrlVmDevNet_SetMacAddress', self.handle, sNewMacAddress)

	def generate_mac_addr(self):
		"""
		Generate a unique MAC address for the virtual network adapter.
		"""
		call_sdk_function('PrlVmDevNet_GenerateMacAddr', self.handle)

	def is_auto_apply(self):
		"""
		Determine if the network adapter is configured to automatically apply network settings inside guest.
		"""
		return bool(call_sdk_function('PrlVmDevNet_IsAutoApply', self.handle))

	def set_auto_apply(self, bAutoApply):
		"""
		Set whether the network adapter should be automatically configured.
		"""
		call_sdk_function('PrlVmDevNet_SetAutoApply', self.handle, bAutoApply)

	def get_net_addresses(self):
		"""
		Obtain the list of IP address/subnet_mask pairs which are assigned to the virtual network adapter.
		"""
		return handle_to_object(call_sdk_function('PrlVmDevNet_GetNetAddresses', self.handle))

	def set_net_addresses(self, hNetAddressesList):
		"""
		Set IP addresses/subnet masks to the network adapter.
		"""
		call_sdk_function('PrlVmDevNet_SetNetAddresses', self.handle, conv_handle_arg(hNetAddressesList))

	def get_dns_servers(self):
		"""
		Obtain the list of DNS servers which are assigned to the virtual network adapter.
		"""
		return handle_to_object(call_sdk_function('PrlVmDevNet_GetDnsServers', self.handle))

	def set_dns_servers(self, hDnsServersList):
		"""
		Assign DNS servers to the network adapter.
		"""
		call_sdk_function('PrlVmDevNet_SetDnsServers', self.handle, conv_handle_arg(hDnsServersList))

	def get_search_domains(self):
		"""
		Obtain the lists of search domains assigned to the virtual network adapter.
		"""
		return handle_to_object(call_sdk_function('PrlVmDevNet_GetSearchDomains', self.handle))

	def set_search_domains(self, hSearchDomainsList):
		"""
		Assign search domains to the network adapter.
		"""
		call_sdk_function('PrlVmDevNet_SetSearchDomains', self.handle, conv_handle_arg(hSearchDomainsList))

	def is_configure_with_dhcp(self):
		"""
		Determine if the network adapter is configured through DHCP on the guest OS side.
		"""
		return bool(call_sdk_function('PrlVmDevNet_IsConfigureWithDhcp', self.handle))

	def set_configure_with_dhcp(self, bConfigureWithDhcp):
		"""
		Set whether the network adapter should be configured through DHCP or manually.
		"""
		call_sdk_function('PrlVmDevNet_SetConfigureWithDhcp', self.handle, bConfigureWithDhcp)

	def is_configure_with_dhcp_ipv6(self):
		return bool(call_sdk_function('PrlVmDevNet_IsConfigureWithDhcpIPv6', self.handle))

	def set_configure_with_dhcp_ipv6(self, bConfigureWithDhcp):
		call_sdk_function('PrlVmDevNet_SetConfigureWithDhcpIPv6', self.handle, bConfigureWithDhcp)

	def get_default_gateway(self):
		"""
		Obtain the default gateway assigned to the virtual network adapter.
		"""
		return call_sdk_function('PrlVmDevNet_GetDefaultGateway', self.handle)

	def set_default_gateway(self, sNewDefaultGateway):
		"""
		Set the default gateway address for the network adapter.
		"""
		call_sdk_function('PrlVmDevNet_SetDefaultGateway', self.handle, sNewDefaultGateway)

	def get_default_gateway_ipv6(self):
		return call_sdk_function('PrlVmDevNet_GetDefaultGatewayIPv6', self.handle)

	def set_default_gateway_ipv6(self, sNewDefaultGateway):
		call_sdk_function('PrlVmDevNet_SetDefaultGatewayIPv6', self.handle, sNewDefaultGateway)

	def get_virtual_network_id(self):
		"""
		Obtain the virtual network ID assigned to the virtual network adapter.
		"""
		return call_sdk_function('PrlVmDevNet_GetVirtualNetworkId', self.handle)

	def set_virtual_network_id(self, sNewVirtualNetworkId):
		"""
		Set the virtual network ID for the network adapter.
		"""
		call_sdk_function('PrlVmDevNet_SetVirtualNetworkId', self.handle, sNewVirtualNetworkId)

	def get_adapter_type(self):
		return call_sdk_function('PrlVmDevNet_GetAdapterType', self.handle)

	def set_adapter_type(self, nAdapterType):
		call_sdk_function('PrlVmDevNet_SetAdapterType', self.handle, nAdapterType)

	def is_pkt_filter_prevent_mac_spoof(self):
		return bool(call_sdk_function('PrlVmDevNet_IsPktFilterPreventMacSpoof', self.handle))

	def set_pkt_filter_prevent_mac_spoof(self, bPktFilterPreventMacSpoof):
		call_sdk_function('PrlVmDevNet_SetPktFilterPreventMacSpoof', self.handle, bPktFilterPreventMacSpoof)

	def is_pkt_filter_prevent_promisc(self):
		return bool(call_sdk_function('PrlVmDevNet_IsPktFilterPreventPromisc', self.handle))

	def set_pkt_filter_prevent_promisc(self, bPktFilterPreventPromisc):
		call_sdk_function('PrlVmDevNet_SetPktFilterPreventPromisc', self.handle, bPktFilterPreventPromisc)

	def is_pkt_filter_prevent_ip_spoof(self):
		return bool(call_sdk_function('PrlVmDevNet_IsPktFilterPreventIpSpoof', self.handle))

	def set_pkt_filter_prevent_ip_spoof(self, bPktFilterPreventIpSpoof):
		call_sdk_function('PrlVmDevNet_SetPktFilterPreventIpSpoof', self.handle, bPktFilterPreventIpSpoof)

	def is_firewall_enabled(self):
		return bool(call_sdk_function('PrlVmDevNet_IsFirewallEnabled', self.handle))

	def set_firewall_enabled(self, bEnabled):
		call_sdk_function('PrlVmDevNet_SetFirewallEnabled', self.handle, bEnabled)

	def get_firewall_default_policy(self, nDirection):
		return call_sdk_function('PrlVmDevNet_GetFirewallDefaultPolicy', self.handle, nDirection)

	def set_firewall_default_policy(self, nDirection, nPolicy):
		call_sdk_function('PrlVmDevNet_SetFirewallDefaultPolicy', self.handle, nDirection, nPolicy)

	def get_firewall_rule_list(self, nDirection):
		return handle_to_object(call_sdk_function('PrlVmDevNet_GetFirewallRuleList', self.handle, nDirection))

	def set_firewall_rule_list(self, nDirection, hRuleList):
		call_sdk_function('PrlVmDevNet_SetFirewallRuleList', self.handle, nDirection, conv_handle_arg(hRuleList))

	def get_host_interface_name(self):
		return call_sdk_function('PrlVmDevNet_GetHostInterfaceName', self.handle)

	def set_host_interface_name(self, sNewHostInterfaceName):
		call_sdk_function('PrlVmDevNet_SetHostInterfaceName', self.handle, sNewHostInterfaceName)

class VmUsb(VmDevice):
	"""
	Provides methods for managing USB devices in a virtual machine.
	"""

	def get_autoconnect_option(self):
		"""
		Obtain the USB controller autoconnect device option.
		"""
		return call_sdk_function('PrlVmDevUsb_GetAutoconnectOption', self.handle)

	def set_autoconnect_option(self, nAutoconnectOption):
		"""
		Set the USB controller autoconnect device option.
		"""
		call_sdk_function('PrlVmDevUsb_SetAutoconnectOption', self.handle, nAutoconnectOption)

class VmSound(VmDevice):
	"""
	Provides methods for managing sound devices in a virtual machine.
	"""

	def get_output_dev(self):
		"""
		Return the output device string for the sound device.
		"""
		return call_sdk_function('PrlVmDevSound_GetOutputDev', self.handle)

	def set_output_dev(self, sNewOutputDev):
		"""
		Set the output device string for the sound device.
		"""
		call_sdk_function('PrlVmDevSound_SetOutputDev', self.handle, sNewOutputDev)

	def get_mixer_dev(self):
		"""
		Return the mixer device string for the sound device.
		"""
		return call_sdk_function('PrlVmDevSound_GetMixerDev', self.handle)

	def set_mixer_dev(self, sNewMixerDev):
		"""
		Set the mixer device string for the sound device.
		"""
		call_sdk_function('PrlVmDevSound_SetMixerDev', self.handle, sNewMixerDev)

class VmSerial(VmDevice):
	"""
	Provides methods for managing serial ports in a virtual machine.
	"""

	def get_socket_mode(self):
		"""
		Return the socket mode of the virtual serial port.
		"""
		return call_sdk_function('PrlVmDevSerial_GetSocketMode', self.handle)

	def set_socket_mode(self, nSocketMode):
		"""
		Set the socket mode for the virtual serial port.
		"""
		call_sdk_function('PrlVmDevSerial_SetSocketMode', self.handle, nSocketMode)

class VmConfig(_Handle):
	"""
	Provides methods for managing the configuration of a virtual machine.
	"""

	def set_network_rate_list(self, hNetworkRateList):
		call_sdk_function('PrlVmCfg_SetNetworkRateList', self.handle, conv_handle_arg(hNetworkRateList))

	def get_network_rate_list(self):
		return handle_to_object(call_sdk_function('PrlVmCfg_GetNetworkRateList', self.handle))

	def is_rate_bound(self):
		return bool(call_sdk_function('PrlVmCfg_IsRateBound', self.handle))

	def set_rate_bound(self, bEnabled):
		call_sdk_function('PrlVmCfg_SetRateBound', self.handle, bEnabled)

	def set_os_template(self, sOsTemplate):
		call_sdk_function('PrlVmCfg_SetOsTemplate', self.handle, sOsTemplate)

	def get_os_template(self):
		return call_sdk_function('PrlVmCfg_GetOsTemplate', self.handle)

	def apply_config_sample(self, sConfigSample):
		call_sdk_function('PrlVmCfg_ApplyConfigSample', self.handle, sConfigSample)

	def get_app_template_list(self):
		return handle_to_object(call_sdk_function('PrlVmCfg_GetAppTemplateList', self.handle))

	def set_app_template_list(self, hAppList):
		call_sdk_function('PrlVmCfg_SetAppTemplateList', self.handle, conv_handle_arg(hAppList))

	def set_default_config(self, hSrvConfig, guestOsVersion, needCreateDevices):
		"""
		Set the default configuration for a new virtual machine based on the guest OS type.
		"""
		call_sdk_function('PrlVmCfg_SetDefaultConfig', self.handle, conv_handle_arg(hSrvConfig), guestOsVersion, needCreateDevices)

	def is_config_invalid(self, nErrCode):
		return bool(call_sdk_function('PrlVmCfg_IsConfigInvalid', nErrCode))

	def get_config_validity(self):
		"""
		Return a constant indicating the virtual machine configuration validity.
		"""
		return call_sdk_function('PrlVmCfg_GetConfigValidity', self.handle)

	def add_default_device(self, hSrvConfig, deviceType):
		"""
		Automates the task of setting devices in a virtual machine.
		"""
		call_sdk_function('PrlVmCfg_AddDefaultDevice', self.handle, conv_handle_arg(hSrvConfig), deviceType)

	def add_default_device_ex(self, hSrvConfig, deviceType):
		return handle_to_object(call_sdk_function('PrlVmCfg_AddDefaultDeviceEx', self.handle, conv_handle_arg(hSrvConfig), deviceType))

	def is_default_device_needed(self, guestOsVersion, deviceType):
		"""
		Determine whether a default virtual device is needed for running the OS of the specified type.
		"""
		return bool(call_sdk_function('PrlVmCfg_IsDefaultDeviceNeeded', guestOsVersion, deviceType))

	def get_default_mem_size(self, guestOsVersion, hostRam):
		"""
		Return the default RAM size for to the specified OS type and version.
		"""
		return call_sdk_function('PrlVmCfg_GetDefaultMemSize', guestOsVersion, hostRam)

	def get_default_hdd_size(self, guestOsVersion):
		"""
		Return the default hard disk size for to the specified OS type and version.
		"""
		return call_sdk_function('PrlVmCfg_GetDefaultHddSize', guestOsVersion)

	def get_default_video_ram_size(self, guestOsVersion, hSrvConfig, bIs3DSupportEnabled):
		"""
		Return the default video RAM size for the specified OS type and version.
		"""
		return call_sdk_function('PrlVmCfg_GetDefaultVideoRamSize', guestOsVersion, conv_handle_arg(hSrvConfig), bIs3DSupportEnabled)

	def create_vm_dev(self, nDeviceType):
		"""
		Create a new virtual device handle of the specified type.
		"""
		return handle_to_object(call_sdk_function('PrlVmCfg_CreateVmDev', self.handle, nDeviceType))

	def get_access_rights(self):
		"""
		Obtain the L{AccessRights} object.
		"""
		return handle_to_object(call_sdk_function('PrlVmCfg_GetAccessRights', self.handle))

	def get_devs_count(self):
		"""
		Determine the total number of devices of all types installed in the virtual machine.
		"""
		return call_sdk_function('PrlVmCfg_GetDevsCount', self.handle)

	def get_all_devices(self):
		"""
		Obtains objects for all virtual devices in a virtual machine.
		"""
		return handle_to_object(call_sdk_function('PrlVmCfg_GetAllDevices', self.handle))

	def get_devs_count_by_type(self, vmDeviceType):
		"""
		Obtain the number of virtual devices of the specified type.
		"""
		return call_sdk_function('PrlVmCfg_GetDevsCountByType', self.handle, vmDeviceType)

	def get_dev_by_type(self, vmDeviceType, nIndex):
		"""
		Obtains a virtual device object according to the specified device type and index.
		"""
		return handle_to_object(call_sdk_function('PrlVmCfg_GetDevByType', self.handle, vmDeviceType, nIndex))

	def get_floppy_disks_count(self):
		"""
		Determine the number of floppy disk drives in a virtual machine.
		"""
		return call_sdk_function('PrlVmCfg_GetFloppyDisksCount', self.handle)

	def get_floppy_disk(self, nIndex):
		"""
		Obtain the L{VmDevice} object containing information about a floppy disk drive in a vrtiual machine.
		"""
		return handle_to_object(call_sdk_function('PrlVmCfg_GetFloppyDisk', self.handle, nIndex))

	def get_hard_disks_count(self):
		"""
		Determines the number of virtual hard disks in a virtual machine.
		"""
		return call_sdk_function('PrlVmCfg_GetHardDisksCount', self.handle)

	def get_hard_disk(self, nIndex):
		"""
		Obtain the L{VmHardDisk} object containing the specified virtual hard disk information.
		"""
		return handle_to_object(call_sdk_function('PrlVmCfg_GetHardDisk', self.handle, nIndex))

	def get_optical_disks_count(self):
		"""
		Determine the number of optical disks in the specified virtual machine.
		"""
		return call_sdk_function('PrlVmCfg_GetOpticalDisksCount', self.handle)

	def get_optical_disk(self, nIndex):
		"""
		Obtain the L{VmDevice} object containing information about a virtual optical disk.
		"""
		return handle_to_object(call_sdk_function('PrlVmCfg_GetOpticalDisk', self.handle, nIndex))

	def get_parallel_ports_count(self):
		"""
		Determine the number of virtual parallel ports in the virtual machine.
		"""
		return call_sdk_function('PrlVmCfg_GetParallelPortsCount', self.handle)

	def get_parallel_port(self, nIndex):
		"""
		Obtains the L{VmDevice} object containing information about a virtual parallel port.
		"""
		return handle_to_object(call_sdk_function('PrlVmCfg_GetParallelPort', self.handle, nIndex))

	def get_serial_ports_count(self):
		"""
		Determine the number of serial ports in a virtual machine.
		"""
		return call_sdk_function('PrlVmCfg_GetSerialPortsCount', self.handle)

	def get_serial_port(self, nIndex):
		"""
		Obtain the L{VmSerial} object containing information about a serial port in a virtual machine.
		"""
		return handle_to_object(call_sdk_function('PrlVmCfg_GetSerialPort', self.handle, nIndex))

	def get_sound_devs_count(self):
		"""
		Determine the number of sound devices in a virtual machine.
		"""
		return call_sdk_function('PrlVmCfg_GetSoundDevsCount', self.handle)

	def get_sound_dev(self, nIndex):
		"""
		Obtain the L{VmSound} object containing information about a sound device in a virtual machine.
		"""
		return handle_to_object(call_sdk_function('PrlVmCfg_GetSoundDev', self.handle, nIndex))

	def get_usb_devices_count(self):
		"""
		Determine the number of USB devices in a virtual machine.
		"""
		return call_sdk_function('PrlVmCfg_GetUsbDevicesCount', self.handle)

	def get_usb_device(self, nIndex):
		"""
		Obtain the L{VmUsb} object containing information about a USB device in the virtual machine.
		"""
		return handle_to_object(call_sdk_function('PrlVmCfg_GetUsbDevice', self.handle, nIndex))

	def get_net_adapters_count(self):
		"""
		Determine the number of network adapters in a virtual machine.
		"""
		return call_sdk_function('PrlVmCfg_GetNetAdaptersCount', self.handle)

	def get_net_adapter(self, nIndex):
		"""
		Obtain the L{VmNet} object containing information about a virtual network adapter.
		"""
		return handle_to_object(call_sdk_function('PrlVmCfg_GetNetAdapter', self.handle, nIndex))

	def get_generic_pci_devs_count(self):
		"""
		Determines the number of generic PCI devices in a virtual machine.
		"""
		return call_sdk_function('PrlVmCfg_GetGenericPciDevsCount', self.handle)

	def get_generic_pci_dev(self, nIndex):
		"""
		Obtain the L{VmDevice} object containing information about a generic PCI device.
		"""
		return handle_to_object(call_sdk_function('PrlVmCfg_GetGenericPciDev', self.handle, nIndex))

	def get_generic_scsi_devs_count(self):
		"""
		Determines the number of generic SCSI devices in a virtual machine.
		"""
		return call_sdk_function('PrlVmCfg_GetGenericScsiDevsCount', self.handle)

	def get_generic_scsi_dev(self, nIndex):
		"""
		Obtain the L{VmDevice} object containing information about a SCSI device in a virtual machine.
		"""
		return handle_to_object(call_sdk_function('PrlVmCfg_GetGenericScsiDev', self.handle, nIndex))

	def get_display_devs_count(self):
		"""
		Determine the number of display devices in a virtual machine.
		"""
		return call_sdk_function('PrlVmCfg_GetDisplayDevsCount', self.handle)

	def get_display_dev(self, nIndex):
		"""
		Obtains the L{VmDevice} containing information about a display device in a virtual machine.
		"""
		return handle_to_object(call_sdk_function('PrlVmCfg_GetDisplayDev', self.handle, nIndex))

	def create_share(self):
		"""
		Create a new instance of L{Share} and add it to the virtual machine list of shares.
		"""
		return handle_to_object(call_sdk_function('PrlVmCfg_CreateShare', self.handle))

	def get_shares_count(self):
		"""
		Determine the number of shared folders in a virtual machine.
		"""
		return call_sdk_function('PrlVmCfg_GetSharesCount', self.handle)

	def get_share(self, nShareIndex):
		"""
		Obtain the L{Share} object containing information about a shared folder.
		"""
		return handle_to_object(call_sdk_function('PrlVmCfg_GetShare', self.handle, nShareIndex))

	def is_smart_guard_enabled(self):
		"""
		Determine whether the SmartGuard feature is enabled in the virtual machine.
		"""
		return bool(call_sdk_function('PrlVmCfg_IsSmartGuardEnabled', self.handle))

	def set_smart_guard_enabled(self, bEnabled):
		"""
		Enable the SmartGuard feature in the virtual machine.
		"""
		call_sdk_function('PrlVmCfg_SetSmartGuardEnabled', self.handle, bEnabled)

	def is_smart_guard_notify_before_creation(self):
		"""
		Determine whether the user will be notified on automatic snapshot creation by SmartGaurd.
		"""
		return bool(call_sdk_function('PrlVmCfg_IsSmartGuardNotifyBeforeCreation', self.handle))

	def set_smart_guard_notify_before_creation(self, bNotifyBeforeCreation):
		"""
		Enable or disable notification of automatic snapshot creation, a SmartGuard feature.
		"""
		call_sdk_function('PrlVmCfg_SetSmartGuardNotifyBeforeCreation', self.handle, bNotifyBeforeCreation)

	def get_smart_guard_interval(self):
		"""
		Determines the interval at which snapshots are taken by SmartGuard.
		"""
		return call_sdk_function('PrlVmCfg_GetSmartGuardInterval', self.handle)

	def set_smart_guard_interval(self, nInterval):
		"""
		Set the time interval at which snapshots are taken by SmartGuard.
		"""
		call_sdk_function('PrlVmCfg_SetSmartGuardInterval', self.handle, nInterval)

	def get_smart_guard_max_snapshots_count(self):
		"""
		Determines the maximum snapshot count, a SmartGuard setting.
		"""
		return call_sdk_function('PrlVmCfg_GetSmartGuardMaxSnapshotsCount', self.handle)

	def set_smart_guard_max_snapshots_count(self, nMaxSnapshotsCount):
		"""
		Set the maximum snapshot count, a SmartGuard feature.
		"""
		call_sdk_function('PrlVmCfg_SetSmartGuardMaxSnapshotsCount', self.handle, nMaxSnapshotsCount)

	def is_user_defined_shared_folders_enabled(self):
		"""
		Determine whether the user-defined shared folders are enabled or not.
		"""
		return bool(call_sdk_function('PrlVmCfg_IsUserDefinedSharedFoldersEnabled', self.handle))

	def set_user_defined_shared_folders_enabled(self, bEnabled):
		"""
		Enables or disables user-defined shared folders.
		"""
		call_sdk_function('PrlVmCfg_SetUserDefinedSharedFoldersEnabled', self.handle, bEnabled)

	def is_smart_mount_enabled(self):
		return bool(call_sdk_function('PrlVmCfg_IsSmartMountEnabled', self.handle))

	def set_smart_mount_enabled(self, bEnabled):
		call_sdk_function('PrlVmCfg_SetSmartMountEnabled', self.handle, bEnabled)

	def is_smart_mount_removable_drives_enabled(self):
		return bool(call_sdk_function('PrlVmCfg_IsSmartMountRemovableDrivesEnabled', self.handle))

	def set_smart_mount_removable_drives_enabled(self, bEnabled):
		call_sdk_function('PrlVmCfg_SetSmartMountRemovableDrivesEnabled', self.handle, bEnabled)

	def is_smart_mount_dvds_enabled(self):
		return bool(call_sdk_function('PrlVmCfg_IsSmartMountDVDsEnabled', self.handle))

	def set_smart_mount_dvds_enabled(self, bEnabled):
		call_sdk_function('PrlVmCfg_SetSmartMountDVDsEnabled', self.handle, bEnabled)

	def is_smart_mount_network_shares_enabled(self):
		return bool(call_sdk_function('PrlVmCfg_IsSmartMountNetworkSharesEnabled', self.handle))

	def set_smart_mount_network_shares_enabled(self, bEnabled):
		call_sdk_function('PrlVmCfg_SetSmartMountNetworkSharesEnabled', self.handle, bEnabled)

	def is_shared_profile_enabled(self):
		"""
		Determine whether the Shared Profile feature is enabled in the virtual machine.
		"""
		return bool(call_sdk_function('PrlVmCfg_IsSharedProfileEnabled', self.handle))

	def set_shared_profile_enabled(self, bEnabled):
		"""
		Enable or disable the Shared Profile feature in the virtual machine.
		"""
		call_sdk_function('PrlVmCfg_SetSharedProfileEnabled', self.handle, bEnabled)

	def is_use_desktop(self):
		"""
		Determine whether the 'use desktop in share profile' feature is enabled or not.
		"""
		return bool(call_sdk_function('PrlVmCfg_IsUseDesktop', self.handle))

	def set_use_desktop(self, bEnabled):
		"""
		Enable or disable the 'undo-desktop' feature in the shared profile.
		"""
		call_sdk_function('PrlVmCfg_SetUseDesktop', self.handle, bEnabled)

	def is_use_documents(self):
		"""
		Determine whether 'use documents in shared profile' feature is enabled or not.
		"""
		return bool(call_sdk_function('PrlVmCfg_IsUseDocuments', self.handle))

	def set_use_documents(self, bEnabled):
		"""
		Enable or disable the 'use documents in shared profile' feature.
		"""
		call_sdk_function('PrlVmCfg_SetUseDocuments', self.handle, bEnabled)

	def is_use_pictures(self):
		"""
		Determine whether the 'used pictures in shared profile' feature is enabled or not.
		"""
		return bool(call_sdk_function('PrlVmCfg_IsUsePictures', self.handle))

	def set_use_pictures(self, bEnabled):
		"""
		Enables or disables the 'use pictures in shared profile' feature.
		"""
		call_sdk_function('PrlVmCfg_SetUsePictures', self.handle, bEnabled)

	def is_use_music(self):
		"""
		Determine whether the 'use music in shared profile' feature is enabled or not.
		"""
		return bool(call_sdk_function('PrlVmCfg_IsUseMusic', self.handle))

	def set_use_music(self, bEnabled):
		"""
		Enables or disables the 'use music in shared profile' feature.
		"""
		call_sdk_function('PrlVmCfg_SetUseMusic', self.handle, bEnabled)

	def is_use_downloads(self):
		return bool(call_sdk_function('PrlVmCfg_IsUseDownloads', self.handle))

	def set_use_downloads(self, bEnabled):
		call_sdk_function('PrlVmCfg_SetUseDownloads', self.handle, bEnabled)

	def is_use_movies(self):
		return bool(call_sdk_function('PrlVmCfg_IsUseMovies', self.handle))

	def set_use_movies(self, bEnabled):
		call_sdk_function('PrlVmCfg_SetUseMovies', self.handle, bEnabled)

	def get_optimize_modifiers_mode(self):
		return call_sdk_function('PrlVmCfg_GetOptimizeModifiersMode', self.handle)

	def set_optimize_modifiers_mode(self, nMode):
		call_sdk_function('PrlVmCfg_SetOptimizeModifiersMode', self.handle, nMode)

	def is_share_clipboard(self):
		"""
		Determine whether the clipboard sharing feature is enabled in the virtual machine.
		"""
		return bool(call_sdk_function('PrlVmCfg_IsShareClipboard', self.handle))

	def set_share_clipboard(self, bEnabled):
		"""
		Enable or disable the clipboard sharing feature.
		"""
		call_sdk_function('PrlVmCfg_SetShareClipboard', self.handle, bEnabled)

	def is_offline_management_enabled(self):
		"""
		Determine whether the offline management feature is enabled for the virtual machine.
		"""
		return bool(call_sdk_function('PrlVmCfg_IsOfflineManagementEnabled', self.handle))

	def set_offline_management_enabled(self, bEnabled):
		"""
		Enables or disables the offline management feature for the virtual machine.
		"""
		call_sdk_function('PrlVmCfg_SetOfflineManagementEnabled', self.handle, bEnabled)

	def is_tools_auto_update_enabled(self):
		"""
		Enables or disables the Tools AutoUpdate feature for the virtual machine.
		"""
		return bool(call_sdk_function('PrlVmCfg_IsToolsAutoUpdateEnabled', self.handle))

	def set_tools_auto_update_enabled(self, bEnabled):
		"""
		Enable or disable the Tools AutoUpdate feature for the virtual machine.
		"""
		call_sdk_function('PrlVmCfg_SetToolsAutoUpdateEnabled', self.handle, bEnabled)

	def is_time_synchronization_enabled(self):
		"""
		Determine whether the time synchronization feature is enabled in the virtual machine.
		"""
		return bool(call_sdk_function('PrlVmCfg_IsTimeSynchronizationEnabled', self.handle))

	def set_time_synchronization_enabled(self, bEnabled):
		"""
		Enable or disable the time synchronization feature in a virtual machine.
		"""
		call_sdk_function('PrlVmCfg_SetTimeSynchronizationEnabled', self.handle, bEnabled)

	def is_time_sync_smart_mode_enabled(self):
		"""
		Determine whether the smart time synchronization is enabled in a virtual machine.
		"""
		return bool(call_sdk_function('PrlVmCfg_IsTimeSyncSmartModeEnabled', self.handle))

	def set_time_sync_smart_mode_enabled(self, bEnabled):
		"""
		Enable or disable the smart time-synchronization mode in the virtual machine.
		"""
		call_sdk_function('PrlVmCfg_SetTimeSyncSmartModeEnabled', self.handle, bEnabled)

	def get_time_sync_interval(self):
		"""
		Obtain the time synchronization interval between the host and the guest OS.
		"""
		return call_sdk_function('PrlVmCfg_GetTimeSyncInterval', self.handle)

	def set_time_sync_interval(self, nTimeSyncInterval):
		"""
		Set the time interval at which time in the virtual machine will be synchronized with the host OS.
		"""
		call_sdk_function('PrlVmCfg_SetTimeSyncInterval', self.handle, nTimeSyncInterval)

	def is_allow_select_boot_device(self):
		"""
		Determine whether the 'select boot device' option is shown on virtual machine startup.
		"""
		return bool(call_sdk_function('PrlVmCfg_IsAllowSelectBootDevice', self.handle))

	def set_allow_select_boot_device(self, bAllowed):
		"""
		Switch on/off the 'select boot device' dialog on virtual machine startup.
		"""
		call_sdk_function('PrlVmCfg_SetAllowSelectBootDevice', self.handle, bAllowed)

	def create_boot_dev(self):
		"""
		Create a new instance of L{BootDevice} and add it to the virtual machine boot device list.
		"""
		return handle_to_object(call_sdk_function('PrlVmCfg_CreateBootDev', self.handle))

	def get_boot_dev_count(self):
		"""
		Determine the number of devices in the virtual machine boot device priority list.
		"""
		return call_sdk_function('PrlVmCfg_GetBootDevCount', self.handle)

	def get_boot_dev(self, nBootDevIndex):
		"""
		Obtain the L{BootDevice} object containing information about a specified boot device.
		"""
		return handle_to_object(call_sdk_function('PrlVmCfg_GetBootDev', self.handle, nBootDevIndex))

	def get_name(self):
		"""
		Return the virtual machine name.
		"""
		return call_sdk_function('PrlVmCfg_GetName', self.handle)

	def set_name(self, sNewVmName):
		"""
		Set the virtual machine name.
		"""
		call_sdk_function('PrlVmCfg_SetName', self.handle, sNewVmName)

	def get_hostname(self):
		"""
		Obtain the hostname of the specified virtual machine.
		"""
		return call_sdk_function('PrlVmCfg_GetHostname', self.handle)

	def set_hostname(self, sNewVmHostname):
		"""
		Set the virtual machine hostname.
		"""
		call_sdk_function('PrlVmCfg_SetHostname', self.handle, sNewVmHostname)

	def get_dns_servers(self):
		return handle_to_object(call_sdk_function('PrlVmCfg_GetDnsServers', self.handle))

	def set_dns_servers(self, hDnsServersList):
		call_sdk_function('PrlVmCfg_SetDnsServers', self.handle, conv_handle_arg(hDnsServersList))

	def get_uuid(self):
		"""
		Return the UUID (universally unique ID) of the virtual machine.
		"""
		return call_sdk_function('PrlVmCfg_GetUuid', self.handle)

	def set_uuid(self, sNewVmUuid):
		"""
		Set the virtual machine UUID (universally unique ID).
		"""
		call_sdk_function('PrlVmCfg_SetUuid', self.handle, sNewVmUuid)

	def get_ct_id(self):
		return call_sdk_function('PrlVmCfg_GetCtId', self.handle)

	def get_linked_vm_uuid(self):
		return call_sdk_function('PrlVmCfg_GetLinkedVmUuid', self.handle)

	def get_os_type(self):
		"""
		Return the type of the operating system that the specified virtual machine is running.
		"""
		return call_sdk_function('PrlVmCfg_GetOsType', self.handle)

	def get_os_version(self):
		"""
		Return the version of the operating system that the specified virtual machine is running.
		"""
		return call_sdk_function('PrlVmCfg_GetOsVersion', self.handle)

	def set_os_version(self, nVmOsVersion):
		"""
		Set the virtual machine guest OS version.
		"""
		call_sdk_function('PrlVmCfg_SetOsVersion', self.handle, nVmOsVersion)

	def get_ram_size(self):
		"""
		Return the virtual machine memory (RAM) size, in megabytes.
		"""
		return call_sdk_function('PrlVmCfg_GetRamSize', self.handle)

	def set_ram_size(self, nVmRamSize):
		"""
		Sets the virtual machine memory (RAM) size.
		"""
		call_sdk_function('PrlVmCfg_SetRamSize', self.handle, nVmRamSize)

	def get_video_ram_size(self):
		"""
		Return the video memory size of the virtual machine.
		"""
		return call_sdk_function('PrlVmCfg_GetVideoRamSize', self.handle)

	def set_video_ram_size(self, nVmVideoRamSize):
		"""
		Set the virtual machine video memory size.
		"""
		call_sdk_function('PrlVmCfg_SetVideoRamSize', self.handle, nVmVideoRamSize)

	def get_mem_guarantee_size(self):
		return call_sdk_function('PrlVmCfg_GetMemGuaranteeSize', self.handle)

	def set_mem_guarantee_size(self, nType, nValue):
		call_sdk_function('PrlVmCfg_SetMemGuaranteeSize', self.handle, nType, nValue)

	def get_cpu_count(self):
		"""
		Determine the number of CPUs in the virtual machine.
		"""
		return call_sdk_function('PrlVmCfg_GetCpuCount', self.handle)

	def set_cpu_count(self, nVmCpuCount):
		"""
		Set the number of CPUs for the virtual machine (the CPUs should be present in the machine).
		"""
		call_sdk_function('PrlVmCfg_SetCpuCount', self.handle, nVmCpuCount)

	def get_cpu_sockets_count(self):
		return call_sdk_function('PrlVmCfg_GetCpuSocketsCount', self.handle)

	def set_cpu_sockets_count(self, nVmCpuSocketsCount):
		call_sdk_function('PrlVmCfg_SetCpuSocketsCount', self.handle, nVmCpuSocketsCount)

	def get_cpu_mode(self):
		"""
		Determine the specified virtual machine CPU mode (32 bit or 64 bit).
		"""
		return call_sdk_function('PrlVmCfg_GetCpuMode', self.handle)

	def set_cpu_mode(self, nVmCpuMode):
		"""
		Set CPU mode (32 bit or 64 bit) for the virtual machine.
		"""
		call_sdk_function('PrlVmCfg_SetCpuMode', self.handle, nVmCpuMode)

	def get_cpu_accel_level(self):
		"""
		Determine the virtual machine CPU acceleration level.
		"""
		return call_sdk_function('PrlVmCfg_GetCpuAccelLevel', self.handle)

	def set_cpu_accel_level(self, nVmCpuAccelLevel):
		"""
		Set CPU acceleration level for the virtual machine.
		"""
		call_sdk_function('PrlVmCfg_SetCpuAccelLevel', self.handle, nVmCpuAccelLevel)

	def is_cpu_vtx_enabled(self):
		"""
		Determine whether the x86 virtualization (such as Vt-x) is available in the virtual machine CPU.
		"""
		return bool(call_sdk_function('PrlVmCfg_IsCpuVtxEnabled', self.handle))

	def is_cpu_hotplug_enabled(self):
		return bool(call_sdk_function('PrlVmCfg_IsCpuHotplugEnabled', self.handle))

	def set_cpu_hotplug_enabled(self, bVmCpuHotplugEnabled):
		call_sdk_function('PrlVmCfg_SetCpuHotplugEnabled', self.handle, bVmCpuHotplugEnabled)

	def get3dacceleration_mode(self):
		return call_sdk_function('PrlVmCfg_Get3DAccelerationMode', self.handle)

	def set3dacceleration_mode(self, n3DAccelerationMode):
		call_sdk_function('PrlVmCfg_Set3DAccelerationMode', self.handle, n3DAccelerationMode)

	def is_vertical_synchronization_enabled(self):
		return bool(call_sdk_function('PrlVmCfg_IsVerticalSynchronizationEnabled', self.handle))

	def set_vertical_synchronization_enabled(self, bEnabled):
		call_sdk_function('PrlVmCfg_SetVerticalSynchronizationEnabled', self.handle, bEnabled)

	def is_high_resolution_enabled(self):
		return bool(call_sdk_function('PrlVmCfg_IsHighResolutionEnabled', self.handle))

	def set_high_resolution_enabled(self, bEnabled):
		call_sdk_function('PrlVmCfg_SetHighResolutionEnabled', self.handle, bEnabled)

	def is_adaptive_hypervisor_enabled(self):
		return bool(call_sdk_function('PrlVmCfg_IsAdaptiveHypervisorEnabled', self.handle))

	def set_adaptive_hypervisor_enabled(self, bEnable):
		call_sdk_function('PrlVmCfg_SetAdaptiveHypervisorEnabled', self.handle, bEnable)

	def is_switch_off_windows_logo_enabled(self):
		return bool(call_sdk_function('PrlVmCfg_IsSwitchOffWindowsLogoEnabled', self.handle))

	def set_switch_off_windows_logo_enabled(self, bEnable):
		call_sdk_function('PrlVmCfg_SetSwitchOffWindowsLogoEnabled', self.handle, bEnable)

	def is_longer_battery_life_enabled(self):
		return bool(call_sdk_function('PrlVmCfg_IsLongerBatteryLifeEnabled', self.handle))

	def set_longer_battery_life_enabled(self, bEnable):
		call_sdk_function('PrlVmCfg_SetLongerBatteryLifeEnabled', self.handle, bEnable)

	def is_battery_status_enabled(self):
		return bool(call_sdk_function('PrlVmCfg_IsBatteryStatusEnabled', self.handle))

	def set_battery_status_enabled(self, bEnable):
		call_sdk_function('PrlVmCfg_SetBatteryStatusEnabled', self.handle, bEnable)

	def is_nested_virtualization_enabled(self):
		return bool(call_sdk_function('PrlVmCfg_IsNestedVirtualizationEnabled', self.handle))

	def set_nested_virtualization_enabled(self, bEnable):
		call_sdk_function('PrlVmCfg_SetNestedVirtualizationEnabled', self.handle, bEnable)

	def is_pmuvirtualization_enabled(self):
		return bool(call_sdk_function('PrlVmCfg_IsPMUVirtualizationEnabled', self.handle))

	def set_pmuvirtualization_enabled(self, bEnable):
		call_sdk_function('PrlVmCfg_SetPMUVirtualizationEnabled', self.handle, bEnable)

	def is_lock_guest_on_suspend_enabled(self):
		return bool(call_sdk_function('PrlVmCfg_IsLockGuestOnSuspendEnabled', self.handle))

	def set_lock_guest_on_suspend_enabled(self, bEnable):
		call_sdk_function('PrlVmCfg_SetLockGuestOnSuspendEnabled', self.handle, bEnable)

	def is_isolated_vm_enabled(self):
		return bool(call_sdk_function('PrlVmCfg_IsIsolatedVmEnabled', self.handle))

	def set_isolated_vm_enabled(self, bEnable):
		call_sdk_function('PrlVmCfg_SetIsolatedVmEnabled', self.handle, bEnable)

	def set_cpu_units(self, nVmCpuUnits):
		"""
		Set the number of CPU units that will be allocated to a virtual machine.
		"""
		call_sdk_function('PrlVmCfg_SetCpuUnits', self.handle, nVmCpuUnits)

	def get_cpu_units(self):
		"""
		Determine the number of CPU units allocated to a virtual machine.
		"""
		return call_sdk_function('PrlVmCfg_GetCpuUnits', self.handle)

	def set_cpu_limit(self, nVmCpuLimit):
		"""
		Set the CPU usage limit (in percent) for a virtual machine.
		"""
		call_sdk_function('PrlVmCfg_SetCpuLimit', self.handle, nVmCpuLimit)

	def get_cpu_limit(self):
		"""
		Determine the CPU usage limit of a virtual machine, in percent.
		"""
		return call_sdk_function('PrlVmCfg_GetCpuLimit', self.handle)

	def set_cpu_limit_ex(self, nType, nValue):
		call_sdk_function('PrlVmCfg_SetCpuLimitEx', self.handle, nType, nValue)

	def get_cpu_limit_ex(self):
		return call_sdk_function('PrlVmCfg_GetCpuLimitEx', self.handle)

	def get_cpu_mask(self):
		return call_sdk_function('PrlVmCfg_GetCpuMask', self.handle)

	def set_cpu_mask(self, sMask):
		call_sdk_function('PrlVmCfg_SetCpuMask', self.handle, sMask)

	def get_node_mask(self):
		return call_sdk_function('PrlVmCfg_GetNodeMask', self.handle)

	def set_node_mask(self, sMask):
		call_sdk_function('PrlVmCfg_SetNodeMask', self.handle, sMask)

	def get_io_priority(self):
		"""
		Determines the specified virtual machine I/O priority.
		"""
		return call_sdk_function('PrlVmCfg_GetIoPriority', self.handle)

	def set_io_priority(self, nVmIoPriority):
		"""
		Set the virtual machine I/O priority.
		"""
		call_sdk_function('PrlVmCfg_SetIoPriority', self.handle, nVmIoPriority)

	def get_io_limit(self):
		return call_sdk_function('PrlVmCfg_GetIoLimit', self.handle)

	def set_io_limit(self, nValue):
		call_sdk_function('PrlVmCfg_SetIoLimit', self.handle, nValue)

	def get_iops_limit(self):
		return call_sdk_function('PrlVmCfg_GetIopsLimit', self.handle)

	def set_iops_limit(self, nVmIopsLimit):
		call_sdk_function('PrlVmCfg_SetIopsLimit', self.handle, nVmIopsLimit)

	def get_server_uuid(self):
		"""
		Returns the UUID of the machine hosting the specified virtual machine.
		"""
		return call_sdk_function('PrlVmCfg_GetServerUuid', self.handle)

	def get_server_host(self):
		"""
		Return the hostname of the machine hosting the specified virtual machine.
		"""
		return call_sdk_function('PrlVmCfg_GetServerHost', self.handle)

	def get_home_path(self):
		"""
		Return the virtual machine home directory name and path.
		"""
		return call_sdk_function('PrlVmCfg_GetHomePath', self.handle)

	def get_location(self):
		return call_sdk_function('PrlVmCfg_GetLocation', self.handle)

	def get_icon(self):
		"""
		Return the name of the icon file used by the specified virtual machine.
		"""
		return call_sdk_function('PrlVmCfg_GetIcon', self.handle)

	def set_icon(self, sNewVmIcon):
		"""
		Set the virtual machine icon.
		"""
		call_sdk_function('PrlVmCfg_SetIcon', self.handle, sNewVmIcon)

	def get_description(self):
		"""
		Return the virtual machine description.
		"""
		return call_sdk_function('PrlVmCfg_GetDescription', self.handle)

	def set_description(self, sNewVmDescription):
		"""
		Set the virtual machine description.
		"""
		call_sdk_function('PrlVmCfg_SetDescription', self.handle, sNewVmDescription)

	def is_template(self):
		"""
		Determine whether the virtual machine is a real machine or a template.
		"""
		return bool(call_sdk_function('PrlVmCfg_IsTemplate', self.handle))

	def set_template_sign(self, bVmIsTemplate):
		"""
		Modify a regular virtual machine to become a template, and vise versa.
		"""
		call_sdk_function('PrlVmCfg_SetTemplateSign', self.handle, bVmIsTemplate)

	def get_custom_property(self):
		"""
		Return the virtual machine custom property information.
		"""
		return call_sdk_function('PrlVmCfg_GetCustomProperty', self.handle)

	def set_custom_property(self, sNewVmCustomProperty):
		"""
		Set the virtual machine custom property information.
		"""
		call_sdk_function('PrlVmCfg_SetCustomProperty', self.handle, sNewVmCustomProperty)

	def get_auto_start(self):
		"""
		Determine if the specified virtual machine is set to start automatically on Dispatcher Service start.
		"""
		return call_sdk_function('PrlVmCfg_GetAutoStart', self.handle)

	def set_auto_start(self, nVmAutoStart):
		"""
		Set the automatic startup option for the virtual machine.
		"""
		call_sdk_function('PrlVmCfg_SetAutoStart', self.handle, nVmAutoStart)

	def get_auto_start_delay(self):
		"""
		Returns the time delay used during the virtual machine automatic startup.
		"""
		return call_sdk_function('PrlVmCfg_GetAutoStartDelay', self.handle)

	def set_auto_start_delay(self, nVmAutoStartDelay):
		"""
		Set the time delay that will be used during the virtual machine automatic startup.
		"""
		call_sdk_function('PrlVmCfg_SetAutoStartDelay', self.handle, nVmAutoStartDelay)

	def get_start_login_mode(self):
		"""
		Return the automatic startup login mode for the virtual machine.
		"""
		return call_sdk_function('PrlVmCfg_GetStartLoginMode', self.handle)

	def set_start_login_mode(self, nVmStartLoginMode):
		"""
		Set the automatic startup login mode for the specified virtual machine.
		"""
		call_sdk_function('PrlVmCfg_SetStartLoginMode', self.handle, nVmStartLoginMode)

	def get_start_user_login(self):
		"""
		Return the user name used during the virtual machine automatic startup.
		"""
		return call_sdk_function('PrlVmCfg_GetStartUserLogin', self.handle)

	def set_start_user_creds(self, sStartUserLogin, sPassword):
		"""
		Sset the automatic startup user login and password for the virtual machine.
		"""
		call_sdk_function('PrlVmCfg_SetStartUserCreds', self.handle, sStartUserLogin, sPassword)

	def get_auto_stop(self):
		"""
		Determine the mode of the automatic shutdown for the specified virtual machine.
		"""
		return call_sdk_function('PrlVmCfg_GetAutoStop', self.handle)

	def set_auto_stop(self, nVmAutoStop):
		"""
		Set the automatic shutdown mode for the virtual machine.
		"""
		call_sdk_function('PrlVmCfg_SetAutoStop', self.handle, nVmAutoStop)

	def get_action_on_window_close(self):
		"""
		Determine the action on Application window close for the specified virtual machine.
		"""
		return call_sdk_function('PrlVmCfg_GetActionOnWindowClose', self.handle)

	def set_action_on_window_close(self, nActionOnWindowClose):
		"""
		Set the action to perform on the console window closing.
		"""
		call_sdk_function('PrlVmCfg_SetActionOnWindowClose', self.handle, nActionOnWindowClose)

	def get_action_on_stop_mode(self):
		return call_sdk_function('PrlVmCfg_GetActionOnStopMode', self.handle)

	def set_action_on_stop_mode(self, nMode):
		call_sdk_function('PrlVmCfg_SetActionOnStopMode', self.handle, nMode)

	def get_window_mode(self):
		"""
		Return the current window mode the virtual machine is in.
		"""
		return call_sdk_function('PrlVmCfg_GetWindowMode', self.handle)

	def set_window_mode(self, nVmWindowMode):
		"""
		Sets the virtual machine window mode.
		"""
		call_sdk_function('PrlVmCfg_SetWindowMode', self.handle, nVmWindowMode)

	def is_start_in_detached_window_enabled(self):
		return bool(call_sdk_function('PrlVmCfg_IsStartInDetachedWindowEnabled', self.handle))

	def set_start_in_detached_window_enabled(self, bEnable):
		call_sdk_function('PrlVmCfg_SetStartInDetachedWindowEnabled', self.handle, bEnable)

	def is_lock_in_full_screen_mode(self):
		"""
		Determine whether the 'lock in screen mode' flag is set in the virtual machine configuration.
		"""
		return bool(call_sdk_function('PrlVmCfg_IsLockInFullScreenMode', self.handle))

	def set_lock_in_full_screen_mode(self, bValue):
		"""
		Enable or disable the lock in screen mode feature in the virtual machine configuration.
		"""
		call_sdk_function('PrlVmCfg_SetLockInFullScreenMode', self.handle, bValue)

	def get_last_modified_date(self):
		"""
		Return the date and time when the specified virtual machine was last modified.
		"""
		return call_sdk_function('PrlVmCfg_GetLastModifiedDate', self.handle)

	def get_last_modifier_name(self):
		"""
		Return the name of the user who last modified the specified virtual machine.
		"""
		return call_sdk_function('PrlVmCfg_GetLastModifierName', self.handle)

	def get_uptime_start_date(self):
		"""
		Return the date and time when the uptime counter was started for the specified virtual machine.
		The date is returned using the yyyy-mm-dd hh:mi:ss format. The date is automatically converted to the local time zone. 
		@return: A string containing the date and time of the virtual machine uptime counter activation.
		"""
		return call_sdk_function('PrlVmCfg_GetUptimeStartDate', self.handle)

	def get_uptime(self):
		return call_sdk_function('PrlVmCfg_GetUptime', self.handle)

	def is_guest_sharing_enabled(self):
		"""
		Determine if guest sharing is enabled (the guest OS disk drives are visible in the host OS).
		"""
		return bool(call_sdk_function('PrlVmCfg_IsGuestSharingEnabled', self.handle))

	def set_guest_sharing_enabled(self, bVmGuestSharingEnabled):
		"""
		Enables the guest sharing feature.
		"""
		call_sdk_function('PrlVmCfg_SetGuestSharingEnabled', self.handle, bVmGuestSharingEnabled)

	def is_guest_sharing_auto_mount(self):
		"""
		Determine if host shared folders are mounted automatically in the virtual machine.
		"""
		return bool(call_sdk_function('PrlVmCfg_IsGuestSharingAutoMount', self.handle))

	def set_guest_sharing_auto_mount(self, bVmGuestSharingAutoMount):
		"""
		Set the guest OS sharing auto-mount option.
		"""
		call_sdk_function('PrlVmCfg_SetGuestSharingAutoMount', self.handle, bVmGuestSharingAutoMount)

	def is_guest_sharing_enable_spotlight(self):
		"""
		Determine if the virtual disks will be added to Spotlight search subsystem (Mac OS X feature).
		"""
		return bool(call_sdk_function('PrlVmCfg_IsGuestSharingEnableSpotlight', self.handle))

	def set_guest_sharing_enable_spotlight(self, bVmGuestSharingEnableSpotlight):
		"""
		Set whether the virtual disks are added to Spotlight search subsystem.
		"""
		call_sdk_function('PrlVmCfg_SetGuestSharingEnableSpotlight', self.handle, bVmGuestSharingEnableSpotlight)

	def is_host_sharing_enabled(self):
		"""
		Determine if host sharing is enabled (host shared folders are visible in the guest OS).
		"""
		return bool(call_sdk_function('PrlVmCfg_IsHostSharingEnabled', self.handle))

	def set_host_sharing_enabled(self, bVmHostSharingEnabled):
		"""
		Enable host sharing for the virtual machine.
		"""
		call_sdk_function('PrlVmCfg_SetHostSharingEnabled', self.handle, bVmHostSharingEnabled)

	def is_share_all_host_disks(self):
		"""
		Determine whether all host disks will be present in the guest OS as shares.
		"""
		return bool(call_sdk_function('PrlVmCfg_IsShareAllHostDisks', self.handle))

	def set_share_all_host_disks(self, bShareAllHostDisks):
		"""
		Enable sharing of all host disks for the virtual machine.
		"""
		call_sdk_function('PrlVmCfg_SetShareAllHostDisks', self.handle, bShareAllHostDisks)

	def is_share_user_home_dir(self):
		"""
		Determine whether the host user home directory will be available in the guest OS as a share.
		"""
		return bool(call_sdk_function('PrlVmCfg_IsShareUserHomeDir', self.handle))

	def set_share_user_home_dir(self, bShareUserHomeDir):
		"""
		Enable or disable sharing of the host user home directory in the specified virtual machine.
		"""
		call_sdk_function('PrlVmCfg_SetShareUserHomeDir', self.handle, bShareUserHomeDir)

	def is_map_shared_folders_on_letters(self):
		"""
		Determine whether host disks shared with the guest Windows OS will be mapped to drive letters.
		"""
		return bool(call_sdk_function('PrlVmCfg_IsMapSharedFoldersOnLetters', self.handle))

	def set_map_shared_folders_on_letters(self, bMapSharedFoldersOnLetters):
		"""
		Enable mapping of shared host disks to drive letters for the virtual machine.
		"""
		call_sdk_function('PrlVmCfg_SetMapSharedFoldersOnLetters', self.handle, bMapSharedFoldersOnLetters)

	def get_vncmode(self):
		"""
		Return the VNC mode of the virtual machine.
		"""
		return call_sdk_function('PrlVmCfg_GetVNCMode', self.handle)

	def set_vncmode(self, nVmRemoteDisplayMode):
		"""
		Set the virtual machine VNC mode.
		"""
		call_sdk_function('PrlVmCfg_SetVNCMode', self.handle, nVmRemoteDisplayMode)

	def get_vncpassword(self):
		"""
		Return the VNC password for the virtual machine.
		"""
		return call_sdk_function('PrlVmCfg_GetVNCPassword', self.handle)

	def set_vncpassword(self, sNewVmRemoteDisplayPassword):
		"""
		Set the virtual machine VNC password.
		"""
		call_sdk_function('PrlVmCfg_SetVNCPassword', self.handle, sNewVmRemoteDisplayPassword)

	def get_vnchost_name(self):
		"""
		Return the VNC hostname of the virtual machine.
		"""
		return call_sdk_function('PrlVmCfg_GetVNCHostName', self.handle)

	def set_vnchost_name(self, sNewVmRemoteDisplayHostName):
		"""
		Set the virtual machine VNC host name.
		"""
		call_sdk_function('PrlVmCfg_SetVNCHostName', self.handle, sNewVmRemoteDisplayHostName)

	def get_vncport(self):
		"""
		Return the VNC port number for the virtual machine
		"""
		return call_sdk_function('PrlVmCfg_GetVNCPort', self.handle)

	def set_vncport(self, nVmRemoteDisplayPort):
		"""
		Set the virtual machine VNC port number.
		"""
		call_sdk_function('PrlVmCfg_SetVNCPort', self.handle, nVmRemoteDisplayPort)

	def get_vncweb_socket_port(self):
		return call_sdk_function('PrlVmCfg_GetVNCWebSocketPort', self.handle)

	def is_vncencryption_enabled(self):
		return bool(call_sdk_function('PrlVmCfg_IsVNCEncryptionEnabled', self.handle))

	def is_scr_res_enabled(self):
		"""
		Determine if additional screen resolution support is enabled in the virtual machine.
		"""
		return bool(call_sdk_function('PrlVmCfg_IsScrResEnabled', self.handle))

	def set_scr_res_enabled(self, bVmScrResEnabled):
		"""
		Enable or disable the additional screen resolution support in the virtual machine.
		"""
		call_sdk_function('PrlVmCfg_SetScrResEnabled', self.handle, bVmScrResEnabled)

	def is_disk_cache_write_back(self):
		"""
		Determine if disk cache write-back is enabled in the virtual machine.
		"""
		return bool(call_sdk_function('PrlVmCfg_IsDiskCacheWriteBack', self.handle))

	def set_disk_cache_write_back(self, bVmDiskCacheWriteBack):
		"""
		Set the virtual machine disk cache write-back option.
		"""
		call_sdk_function('PrlVmCfg_SetDiskCacheWriteBack', self.handle, bVmDiskCacheWriteBack)

	def is_os_res_in_full_scr_mode(self):
		"""
		Determines wether the virtual machine OS resolution is in full screen mode.
		"""
		return bool(call_sdk_function('PrlVmCfg_IsOsResInFullScrMode', self.handle))

	def set_os_res_in_full_scr_mode(self, bVmOsResInFullScrMode):
		"""
		Turn on/off the virtual machine OS resolution in full screen mode option.
		"""
		call_sdk_function('PrlVmCfg_SetOsResInFullScrMode', self.handle, bVmOsResInFullScrMode)

	def is_close_app_on_shutdown(self):
		"""
		Determine whether the console app is automatically closed on the virtual machine shutdown.
		"""
		return bool(call_sdk_function('PrlVmCfg_IsCloseAppOnShutdown', self.handle))

	def set_close_app_on_shutdown(self, bVmCloseAppOnShutdown):
		"""
		Set whether the console app will be closed on the virtual machine shutdown.
		"""
		call_sdk_function('PrlVmCfg_SetCloseAppOnShutdown', self.handle, bVmCloseAppOnShutdown)

	def get_system_flags(self):
		"""
		Return the virtual machine system flags.
		"""
		return call_sdk_function('PrlVmCfg_GetSystemFlags', self.handle)

	def set_system_flags(self, sNewVmSystemFlags):
		"""
		Set the virtual machine system flags.
		"""
		call_sdk_function('PrlVmCfg_SetSystemFlags', self.handle, sNewVmSystemFlags)

	def is_disable_apic(self):
		"""
		Determine whether the APIC is enabled during the virtual machine runtime.
		"""
		return bool(call_sdk_function('PrlVmCfg_IsDisableAPIC', self.handle))

	def set_disable_apicsign(self, bDisableAPIC):
		"""
		Set whether the virtual machine should be using APIC during runtime.
		"""
		call_sdk_function('PrlVmCfg_SetDisableAPICSign', self.handle, bDisableAPIC)

	def is_disable_speaker(self):
		return bool(call_sdk_function('PrlVmCfg_IsDisableSpeaker', self.handle))

	def set_disable_speaker_sign(self, bDisableSpeaker):
		call_sdk_function('PrlVmCfg_SetDisableSpeakerSign', self.handle, bDisableSpeaker)

	def get_undo_disks_mode(self):
		"""
		Determine the current undo-disks mode for the virtual machine.
		"""
		return call_sdk_function('PrlVmCfg_GetUndoDisksMode', self.handle)

	def set_undo_disks_mode(self, nUndoDisksMode):
		"""
		Set the undo-disks mode for the virtual machine.
		"""
		call_sdk_function('PrlVmCfg_SetUndoDisksMode', self.handle, nUndoDisksMode)

	def get_foreground_priority(self):
		"""
		Return foreground processes priority for the specified virtual machine.
		"""
		return call_sdk_function('PrlVmCfg_GetForegroundPriority', self.handle)

	def set_foreground_priority(self, nVmForegroundPriority):
		"""
		Set the virtual machine foreground processes priority.
		"""
		call_sdk_function('PrlVmCfg_SetForegroundPriority', self.handle, nVmForegroundPriority)

	def get_background_priority(self):
		"""
		Determine the specified virtual machine background process priority type.
		"""
		return call_sdk_function('PrlVmCfg_GetBackgroundPriority', self.handle)

	def set_background_priority(self, nVmBackgroundPriority):
		"""
		Set the virtual machine background processes priority.
		"""
		call_sdk_function('PrlVmCfg_SetBackgroundPriority', self.handle, nVmBackgroundPriority)

	def is_use_default_answers(self):
		"""
		Determine whether the use default answers mechanism is active in the virtual machine.
		"""
		return bool(call_sdk_function('PrlVmCfg_IsUseDefaultAnswers', self.handle))

	def set_use_default_answers(self, bUseDefaultAnswers):
		"""
		Enable the use default answers mechanism in a virtual machine.
		"""
		call_sdk_function('PrlVmCfg_SetUseDefaultAnswers', self.handle, bUseDefaultAnswers)

	def get_search_domains(self):
		"""
		Obtain the list of search domains that will be assigned to the guest OS.
		"""
		return handle_to_object(call_sdk_function('PrlVmCfg_GetSearchDomains', self.handle))

	def set_search_domains(self, hSearchDomainsList):
		"""
		Set the global search domain list that will be assigned to the guest OS.
		"""
		call_sdk_function('PrlVmCfg_SetSearchDomains', self.handle, conv_handle_arg(hSearchDomainsList))

	def get_offline_services(self):
		"""
		Obtain the list of services available in the virtual machine offline management.
		"""
		return handle_to_object(call_sdk_function('PrlVmCfg_GetOfflineServices', self.handle))

	def set_offline_services(self, hOfflineServicesList):
		"""
		Set offline services that will be available in the virtual machine offline management.
		"""
		call_sdk_function('PrlVmCfg_SetOfflineServices', self.handle, conv_handle_arg(hOfflineServicesList))

	def get_confirmations_list(self):
		"""
		Obtain a list of operations with virtual machine which requires administrator confirmation.
		"""
		return handle_to_object(call_sdk_function('PrlVmCfg_GetConfirmationsList', self.handle))

	def set_confirmations_list(self, hConfirmList):
		"""
		Obtain the list of virtual machine operations that require administrator confirmation.
		"""
		call_sdk_function('PrlVmCfg_SetConfirmationsList', self.handle, conv_handle_arg(hConfirmList))

	def is_auto_compress_enabled(self):
		"""
		Determine whether the Automatic HDD compression feature is enabled in the virtual machine.
		"""
		return bool(call_sdk_function('PrlVmCfg_IsAutoCompressEnabled', self.handle))

	def set_auto_compress_enabled(self, bEnabled):
		"""
		Enables or disables the Automatic HDD compression feature in the virtual machine.
		"""
		call_sdk_function('PrlVmCfg_SetAutoCompressEnabled', self.handle, bEnabled)

	def get_auto_compress_interval(self):
		"""
		Determine the interval at which compacting virtual disks is performed by Automatic HDD compression.
		"""
		return call_sdk_function('PrlVmCfg_GetAutoCompressInterval', self.handle)

	def set_auto_compress_interval(self, nInterval):
		"""
		Set the time interval at which compacting virtual disks is done by Automatic HDD compression.
		"""
		call_sdk_function('PrlVmCfg_SetAutoCompressInterval', self.handle, nInterval)

	def get_free_disk_space_ratio(self):
		"""
		Determine free disk space ratio at which disk compacting is done by Automatic HDD compression.
		"""
		return call_sdk_function('PrlVmCfg_GetFreeDiskSpaceRatio', self.handle)

	def set_free_disk_space_ratio(self, dFreeDiskSpaceRatio):
		"""
		Set the free disk space ratio at which compacting virtual disks is done by Automatic HDD compress.
		"""
		call_sdk_function('PrlVmCfg_SetFreeDiskSpaceRatio', self.handle, dFreeDiskSpaceRatio)

	def get_vm_info(self):
		return handle_to_object(call_sdk_function('PrlVmCfg_GetVmInfo', self.handle))

	def get_vm_type(self):
		return call_sdk_function('PrlVmCfg_GetVmType', self.handle)

	def set_vm_type(self, nType):
		call_sdk_function('PrlVmCfg_SetVmType', self.handle, nType)

	def is_efi_enabled(self):
		return bool(call_sdk_function('PrlVmCfg_IsEfiEnabled', self.handle))

	def set_efi_enabled(self, bEfiEnabled):
		call_sdk_function('PrlVmCfg_SetEfiEnabled', self.handle, bEfiEnabled)

	def get_external_boot_device(self):
		return call_sdk_function('PrlVmCfg_GetExternalBootDevice', self.handle)

	def set_external_boot_device(self, sNewSysName):
		call_sdk_function('PrlVmCfg_SetExternalBootDevice', self.handle, sNewSysName)

	def is_ram_hotplug_enabled(self):
		return bool(call_sdk_function('PrlVmCfg_IsRamHotplugEnabled', self.handle))

	def set_ram_hotplug_enabled(self, bVmRamHotplugEnabled):
		call_sdk_function('PrlVmCfg_SetRamHotplugEnabled', self.handle, bVmRamHotplugEnabled)

	def get_resource(self, nResourceId):
		return call_sdk_function('PrlVmCfg_GetResource', self.handle, nResourceId)

	def set_resource(self, nResourceId, nBarrirer, nLimit):
		call_sdk_function('PrlVmCfg_SetResource', self.handle, nResourceId, nBarrirer, nLimit)

	def is_auto_apply_ip_only(self):
		return bool(call_sdk_function('PrlVmCfg_IsAutoApplyIpOnly', self.handle))

	def set_auto_apply_ip_only(self, bAutoApplyIpOnly):
		call_sdk_function('PrlVmCfg_SetAutoApplyIpOnly', self.handle, bAutoApplyIpOnly)

	def get_capabilities_mask(self):
		return call_sdk_function('PrlVmCfg_GetCapabilitiesMask', self.handle)

	def set_capabilities_mask(self, nCapMask):
		call_sdk_function('PrlVmCfg_SetCapabilitiesMask', self.handle, nCapMask)

	def get_netfilter_mode(self):
		return call_sdk_function('PrlVmCfg_GetNetfilterMode', self.handle)

	def set_netfilter_mode(self, nMode):
		call_sdk_function('PrlVmCfg_SetNetfilterMode', self.handle, nMode)

	def get_features_mask(self):
		return call_sdk_function('PrlVmCfg_GetFeaturesMask', self.handle)

	def set_features_mask(self, nOn, nOff):
		call_sdk_function('PrlVmCfg_SetFeaturesMask', self.handle, nOn, nOff)

	def set_high_availability_enabled(self, bEnabled):
		call_sdk_function('PrlVmCfg_SetHighAvailabilityEnabled', self.handle, bEnabled)

	def is_high_availability_enabled(self):
		return bool(call_sdk_function('PrlVmCfg_IsHighAvailabilityEnabled', self.handle))

	def set_high_availability_priority(self, nPriority):
		call_sdk_function('PrlVmCfg_SetHighAvailabilityPriority', self.handle, nPriority)

	def get_high_availability_priority(self):
		return call_sdk_function('PrlVmCfg_GetHighAvailabilityPriority', self.handle)

	def get_action_on_guest_crash(self):
		return call_sdk_function('PrlVmCfg_GetActionOnGuestCrash', self.handle)

	def set_action_on_guest_crash(self, nAction):
		call_sdk_function('PrlVmCfg_SetActionOnGuestCrash', self.handle, nAction)

	def get_options_on_guest_crash(self):
		return call_sdk_function('PrlVmCfg_GetOptionsOnGuestCrash', self.handle)

	def set_options_on_guest_crash(self, nOptions):
		call_sdk_function('PrlVmCfg_SetOptionsOnGuestCrash', self.handle, nOptions)

class Vm(VmConfig):
	"""
	The Vm class provides methods for managing virtual machines.
	When you want to get the information about, modify, or create a
	virtual machine, you have to obtain an instance of this class.
	The instance is obtained using methods of other classes. The
	most commonly used methods are L{Server.create_vm}
	and the L{Server.get_vm_list}.
	"""

	def start(self):
		"""
		Start the virtual machine.
		"""
		return Job(SDK.PrlVm_Start(self.handle)[0])

	def start_ex(self, nStartMode = consts.PSM_VM_START, nReserved = 0):
		"""
		Start the virtual machine using the specified mode.
		"""
		return Job(SDK.PrlVm_StartEx(self.handle, nStartMode, nReserved)[0])

	def restart(self):
		"""
		Restart the virtual machine.
		"""
		return Job(SDK.PrlVm_Restart(self.handle)[0])

	def stop(self, bGraceful = False):
		"""
		Stop the virtual machine.
		"""
		return Job(SDK.PrlVm_Stop(self.handle, bGraceful)[0])

	def stop_ex(self, nStopMode, nFlags):
		return Job(SDK.PrlVm_StopEx(self.handle, nStopMode, nFlags)[0])

	def pause(self, bAcpi = False):
		"""
		Pause the virtual machine.
		"""
		return Job(SDK.PrlVm_Pause(self.handle, bAcpi)[0])

	def reset(self):
		"""
		Reset the virtual machine.
		"""
		return Job(SDK.PrlVm_Reset(self.handle)[0])

	def suspend(self):
		"""
		Suspend the virtual machine.
		"""
		return Job(SDK.PrlVm_Suspend(self.handle)[0])

	def change_sid(self, nFlags):
		return Job(SDK.PrlVm_ChangeSid(self.handle, nFlags)[0])

	def reset_uptime(self, nFlags = 0):
		return Job(SDK.PrlVm_ResetUptime(self.handle, nFlags)[0])

	def get_suspended_screen(self):
		"""
		Obtain the virtual machine screen state before it was suspending.
		"""
		return Job(SDK.PrlVm_GetSuspendedScreen(self.handle)[0])

	def resume(self):
		"""
		Resume a suspended virtual machine.
		"""
		return Job(SDK.PrlVm_Resume(self.handle)[0])

	def drop_suspended_state(self):
		"""
		Resets a suspended virtual machine.
		"""
		return Job(SDK.PrlVm_DropSuspendedState(self.handle)[0])

	def create_snapshot(self, sName, sDescription = ''):
		"""
		Create a snapshot of a virtual machine.
		"""
		return Job(SDK.PrlVm_CreateSnapshot(self.handle, sName, sDescription)[0])

	def switch_to_snapshot(self, sSnapshotUuid):
		"""
		Revert the specified virtual machine to the specified snapshot.
		"""
		return Job(SDK.PrlVm_SwitchToSnapshot(self.handle, sSnapshotUuid)[0])

	def switch_to_snapshot_ex(self, sSnapshotUuid, nFlags):
		return Job(SDK.PrlVm_SwitchToSnapshotEx(self.handle, sSnapshotUuid, nFlags)[0])

	def delete_snapshot(self, sSnapshotUuid, bChild = False):
		"""
		Delete the specified virtual machine snapshot.
		"""
		return Job(SDK.PrlVm_DeleteSnapshot(self.handle, sSnapshotUuid, bChild)[0])

	def get_snapshots_tree(self):
		"""
		Obtain snapshot information for the specified virtual machine.
		"""
		return Job(SDK.PrlVm_GetSnapshotsTree(self.handle)[0])

	def get_snapshots_tree_ex(self, nFlags):
		return Job(SDK.PrlVm_GetSnapshotsTreeEx(self.handle, nFlags)[0])

	def lock(self, nReserved):
		"""
		Exclusively locks the virtual machine for current session.
		"""
		return Job(SDK.PrlVm_Lock(self.handle, nReserved)[0])

	def unlock(self, nReserved):
		"""
		Unlocks a previously locked virtual machine.
		"""
		return Job(SDK.PrlVm_Unlock(self.handle, nReserved)[0])

	def update_snapshot_data(self, sSnapshotUuid, sNewName, sNewDescription = ''):
		"""
		Modify the virtual machine snapshot name and description.
		"""
		return Job(SDK.PrlVm_UpdateSnapshotData(self.handle, sSnapshotUuid, sNewName, sNewDescription)[0])

	def clone(self, new_vm_name, new_vm_root_path, bCreateTemplate = False):
		"""
		Clone an existing virtual machine.
		"""
		return Job(SDK.PrlVm_Clone(self.handle, new_vm_name, new_vm_root_path, bCreateTemplate)[0])

	def clone_ex(self, new_vm_name, new_vm_root_path, nFlags):
		"""
		Clone an existing virtual machine (extended version).
		"""
		return Job(SDK.PrlVm_CloneEx(self.handle, new_vm_name, new_vm_root_path, nFlags)[0])

	def clone_with_uuid(self, new_vm_name, new_vm_uuid, new_vm_root_path, nFlags):
		return Job(SDK.PrlVm_CloneWithUuid(self.handle, new_vm_name, new_vm_uuid, new_vm_root_path, nFlags)[0])

	def migrate(self, hTargetServer, target_home_path = '', migration_flags = consts.PVMSL_LOW_SECURITY, reserved_flags = 0, force_operation = True):
		"""
		Migrate an existing virtual machine to another host.
		"""
		return Job(SDK.PrlVm_Migrate(self.handle, conv_handle_arg(hTargetServer), target_home_path, migration_flags, reserved_flags, force_operation)[0])

	def migrate_ex(self, target_host, target_port, target_session_id, target_home_path = '', migration_flags = consts.PVMSL_LOW_SECURITY, reserved_flags = 0, force_operation = True):
		"""
		Migrate an existing virtual machine to another host (extended version).
		"""
		return Job(SDK.PrlVm_MigrateEx(self.handle, target_host, target_port, target_session_id, target_home_path, migration_flags, reserved_flags, force_operation)[0])

	def migrate_with_rename(self, hTargetServer, target_name, target_home_path, migration_flags, reserved_flags, force_operation):
		return Job(SDK.PrlVm_MigrateWithRename(self.handle, conv_handle_arg(hTargetServer), target_name, target_home_path, migration_flags, reserved_flags, force_operation)[0])

	def migrate_with_rename_ex(self, target_host, target_port, target_session_id, target_name, target_home_path, migration_flags, reserved_flags, force_operation):
		return Job(SDK.PrlVm_MigrateWithRenameEx(self.handle, target_host, target_port, target_session_id, target_name, target_home_path, migration_flags, reserved_flags, force_operation)[0])

	def migrate_cancel(self):
		"""
		Cancel the virtual machine migration operation.
		"""
		return Job(SDK.PrlVm_MigrateCancel(self.handle)[0])

	def generate_vm_dev_filename(self, sFilenamePrefix = '', sFilenameSuffix = '', sIndexDelimiter = ''):
		"""
		Generate a unique name for a virtual device.
		"""
		return Job(SDK.PrlVm_GenerateVmDevFilename(self.handle, sFilenamePrefix, sFilenameSuffix, sIndexDelimiter)[0])

	def delete(self, hDevicesList = consts.PRL_INVALID_HANDLE):
		"""
		Delete the specified virtual machine from the host.
		"""
		return Job(SDK.PrlVm_Delete(self.handle, conv_handle_arg(hDevicesList))[0])

	def get_problem_report(self):
		"""
		Obtain a problem report on abnormal virtual machine termination.
		"""
		return Job(SDK.PrlVm_GetProblemReport(self.handle)[0])

	def get_packed_problem_report(self, nFlags):
		return Job(SDK.PrlVm_GetPackedProblemReport(self.handle, nFlags)[0])

	def get_state(self):
		"""
		Obtain the L{VmInfo} object containing the specified virtual machine information.
		"""
		return Job(SDK.PrlVm_GetState(self.handle)[0])

	def refresh_config(self):
		"""
		Refresh the virtual machine configuration information.
		"""
		return Job(SDK.PrlVm_RefreshConfig(self.handle)[0])

	def refresh_config_ex(self, nFlags):
		return Job(SDK.PrlVm_RefreshConfigEx(self.handle, nFlags)[0])

	def login_in_guest(self, sUserName, sUserPassword, nFlags = 0):
		"""
		Create a new console session or binds to an existing GUI session in a virtual machine.
		"""
		return Job(SDK.PrlVm_LoginInGuest(self.handle, sUserName, sUserPassword, nFlags)[0])

	def start_vnc_server(self, nReserved = 0):
		"""
		Start a VNC server for the specified virtual machine.
		"""
		return Job(SDK.PrlVm_StartVncServer(self.handle, nReserved)[0])

	def stop_vnc_server(self, nReserved = 0):
		"""
		Stops the VNC server in a virtual machine
		"""
		return Job(SDK.PrlVm_StopVncServer(self.handle, nReserved)[0])

	def set_user_passwd(self, sUserName, sUserPasswd, nFlags = 0):
		"""
		Change the password of a guest operating system user.
		"""
		return Job(SDK.PrlVm_SetUserPasswd(self.handle, sUserName, sUserPasswd, nFlags)[0])

	def set_config(self, hVmCfg):
		"""
		This is a reserved method.
		"""
		call_sdk_function('PrlVm_SetConfig', self.handle, conv_handle_arg(hVmCfg))

	def get_config(self):
		"""
		Obtain a handle of type L{VmConfig}
		"""
		return handle_to_object(call_sdk_function('PrlVm_GetConfig', self.handle))

	def get_statistics(self):
		"""
		Obtain the L{Statistics} object containing the virtual machine resource usage statistics.
		"""
		return Job(SDK.PrlVm_GetStatistics(self.handle)[0])

	def get_statistics_ex(self, nFlags):
		return Job(SDK.PrlVm_GetStatisticsEx(self.handle, nFlags)[0])

	def subscribe_to_guest_statistics(self):
		"""
		Subscribe to receive the virtual machine performance statistics.
		"""
		return Job(SDK.PrlVm_SubscribeToGuestStatistics(self.handle)[0])

	def unsubscribe_from_guest_statistics(self):
		"""
		Cancels the performance statistics subscription.
		"""
		return Job(SDK.PrlVm_UnsubscribeFromGuestStatistics(self.handle)[0])

	def reg(self, sVmParentPath, bNonInteractiveMode = False):
		"""
		Create a new virtual machine and register it with the Dispatcher Service.
		"""
		return Job(SDK.PrlVm_Reg(self.handle, sVmParentPath, bNonInteractiveMode)[0])

	def reg_ex(self, sVmParentPath, nFlags):
		return Job(SDK.PrlVm_RegEx(self.handle, sVmParentPath, nFlags)[0])

	def unreg(self):
		"""
		Unregisters the virtual machine from the Dispatcher Service.
		"""
		return Job(SDK.PrlVm_Unreg(self.handle)[0])

	def restore(self):
		"""
		Restores the registered virtual machine.
		"""
		return Job(SDK.PrlVm_Restore(self.handle)[0])

	def begin_edit(self):
		"""
		Mark the beginning of the virtual machine configuration changes operation.
		"""
		return Job(SDK.PrlVm_BeginEdit(self.handle)[0])

	def commit(self):
		"""
		Commit the virtual machine configuration changes.
		"""
		return Job(SDK.PrlVm_Commit(self.handle)[0])

	def commit_ex(self, nFlags):
		return Job(SDK.PrlVm_CommitEx(self.handle, nFlags)[0])

	def reg_event_handler(self, callback_func, userData):
		call_sdk_function('PrlVm_RegEventHandler', self.handle, callback_func, userData)

	def unreg_event_handler(self, callback_func, userData):
		"""
		Unregister an event handler.
		"""
		call_sdk_function('PrlVm_UnregEventHandler', self.handle, callback_func, userData)

	def get_questions(self):
		"""
		Synchronously receive questions from the Dispatcher Service.
		"""
		return handle_to_object(call_sdk_function('PrlVm_GetQuestions', self.handle))

	def create_event(self):
		"""
		Creates an event bound to the virtual machine.
		"""
		return handle_to_object(call_sdk_function('PrlVm_CreateEvent', self.handle))

	def create_unattended_floppy(self, nGuestDistroType, sUsername, sCompanyName, sSerialKey):
		"""
		Create a floppy disk image for unattended Windows installation.
		"""
		return Job(SDK.PrlVm_CreateUnattendedFloppy(self.handle, nGuestDistroType, sUsername, sCompanyName, sSerialKey)[0])

	def initiate_dev_state_notifications(self):
		"""
		Initiate the device states notification service.
		"""
		return Job(SDK.PrlVm_InitiateDevStateNotifications(self.handle)[0])

	def validate_config(self, nSection = consts.PVC_ALL):
		"""
		Validate the specified section of a virtual machine configuration.
		"""
		return Job(SDK.PrlVm_ValidateConfig(self.handle, nSection)[0])

	def update_security(self, hAccessRights):
		"""
		Updates the security access level for the virtual machine.
		"""
		return Job(SDK.PrlVm_UpdateSecurity(self.handle, conv_handle_arg(hAccessRights))[0])

	def install_tools(self):
		"""
		Install Tools in the virtual machine.
		"""
		return Job(SDK.PrlVm_InstallTools(self.handle)[0])

	def get_tools_state(self):
		"""
		Determine whether Tools is installed in the virtual machine.
		"""
		return Job(SDK.PrlVm_GetToolsState(self.handle)[0])

	def subscribe_to_perf_stats(self, sFilter):
		return Job(SDK.PrlVm_SubscribeToPerfStats(self.handle, sFilter)[0])

	def unsubscribe_from_perf_stats(self):
		"""
		Cancels the Dispatcher Service performance statistics subscription .
		"""
		return Job(SDK.PrlVm_UnsubscribeFromPerfStats(self.handle)[0])

	def get_perf_stats(self, sFilter):
		return Job(SDK.PrlVm_GetPerfStats(self.handle, sFilter)[0])

	def auth_with_guest_security_db(self, sUserName, sUserPassword, nFlags = 0):
		"""
		Authenticate the user through the guest OS security database.
		"""
		return Job(SDK.PrlVm_AuthWithGuestSecurityDb(self.handle, sUserName, sUserPassword, nFlags)[0])

	def compact(self, uMask, nFlags = 0):
		"""
		Start the process of a virtual hard disk optimization.
		"""
		return Job(SDK.PrlVm_Compact(self.handle, uMask, nFlags)[0])

	def cancel_compact(self):
		"""
		Finishes process of optimization of virtual hard disk.
		"""
		return Job(SDK.PrlVm_CancelCompact(self.handle)[0])

	def convert_disks(self, uMask, nFlags):
		return Job(SDK.PrlVm_ConvertDisks(self.handle, uMask, nFlags)[0])

	def cancel_convert_disks(self, nFlags):
		return Job(SDK.PrlVm_CancelConvertDisks(self.handle, nFlags)[0])

	def mount(self, sMntPath, nFlags):
		return Job(SDK.PrlVm_Mount(self.handle, sMntPath, nFlags)[0])

	def umount(self, nFlags):
		return Job(SDK.PrlVm_Umount(self.handle, nFlags)[0])

	def move(self, sNewHomePath, nFlags):
		return Job(SDK.PrlVm_Move(self.handle, sNewHomePath, nFlags)[0])

	def connect(self, nFlags):
		return Job(SDK.PrlVm_Connect(self.handle, nFlags)[0])

	def disconnect(self):
		call_sdk_function('PrlVm_Disconnect', self.handle)

	def capture_screen(self, nWidth, nHeight, nFlags):
		return Job(SDK.PrlVm_CaptureScreen(self.handle, nWidth, nHeight, nFlags)[0])

	def commit_encryption(self, nFlags, hPolicyList, hReserved):
		return Job(SDK.PrlVm_CommitEncryption(self.handle, nFlags, conv_handle_arg(hPolicyList), conv_handle_arg(hReserved))[0])

	def reinstall(self, sOsTemplate, nFlags):
		return Job(SDK.PrlCt_Reinstall(self.handle, sOsTemplate, nFlags)[0])

	def begin_backup(self, nFlags):
		return Job(SDK.PrlVm_BeginBackup(self.handle, nFlags)[0])

class VmGuest(_Handle):
	"""
	The VmGuest class is used to run programs and execute administrative tasks in a virtual machine.
	"""

	def logout(self, nReserved = 0):
		"""
		Closes a session (or unbinds from a pre-existing session) in a virtual machine.
		"""
		return Job(SDK.PrlVmGuest_Logout(self.handle, nReserved)[0])

	def run_program(self, sAppName, hArgsList, hEnvsList, nFlags = consts.PRPM_RUN_PROGRAM_AND_RETURN_IMMEDIATELY, nStdin = consts.PRL_INVALID_FILE_DESCRIPTOR, nStdout = consts.PRL_INVALID_FILE_DESCRIPTOR, nStderr = consts.PRL_INVALID_FILE_DESCRIPTOR):
		"""
		Execute a program in a virtual machine.
		"""
		return Job(SDK.PrlVmGuest_RunProgram(self.handle, sAppName, conv_handle_arg(hArgsList), conv_handle_arg(hEnvsList), nFlags, nStdin, nStdout, nStderr)[0])

	def get_network_settings(self, nReserved = 0):
		"""
		Obtain network settings of the guest operating system running in a virtual machine.
		"""
		return Job(SDK.PrlVmGuest_GetNetworkSettings(self.handle, nReserved)[0])

class Share(_Handle):
	"""
	Provides methods for managing host shares. 
	Using this class, you can make a host OS directory visible and accessible in a virtual machine.
	"""

	def remove(self):
		"""
		Remove the share from the virtual machine configuration.
		"""
		call_sdk_function('PrlShare_Remove', self.handle)

	def get_name(self):
		"""
		Return the shared folder name (as it appears in the guest OS).
		"""
		return call_sdk_function('PrlShare_GetName', self.handle)

	def set_name(self, sNewShareName):
		"""
		Set the share name (as it will appear in the guest OS).
		"""
		call_sdk_function('PrlShare_SetName', self.handle, sNewShareName)

	def get_path(self):
		"""
		Return the shared folder path.
		"""
		return call_sdk_function('PrlShare_GetPath', self.handle)

	def set_path(self, sNewSharePath):
		"""
		Set the shared folder path.
		"""
		call_sdk_function('PrlShare_SetPath', self.handle, sNewSharePath)

	def get_description(self):
		"""
		Return the shared folder description.
		"""
		return call_sdk_function('PrlShare_GetDescription', self.handle)

	def set_description(self, sNewShareDescription):
		"""
		Set the shared folder description.
		"""
		call_sdk_function('PrlShare_SetDescription', self.handle, sNewShareDescription)

	def is_enabled(self):
		"""
		Determine whether the share is enabled or not.
		"""
		return bool(call_sdk_function('PrlShare_IsEnabled', self.handle))

	def set_enabled(self, bEnabled):
		"""
		Enable the specified share.
		"""
		call_sdk_function('PrlShare_SetEnabled', self.handle, bEnabled)

	def is_read_only(self):
		"""
		Determine if the share is read-only.
		"""
		return bool(call_sdk_function('PrlShare_IsReadOnly', self.handle))

	def set_read_only(self, bReadOnly):
		"""
		Make the shared folder read-only.
		"""
		call_sdk_function('PrlShare_SetReadOnly', self.handle, bReadOnly)

class BootDevice(_Handle):
	"""
	Provides methods for managing boot device in a virtual machine. An object contains information about an
	individual boot device.
	"""

	def remove(self):
		"""
		Remove the boot device from the boot priority list.
		"""
		call_sdk_function('PrlBootDev_Remove', self.handle)

	def get_type(self):
		"""
		Return the boot device type.
		Device type is a property that, together with device index, is used to uniquely identify a device in the
		virtual machine boot priority list.
		@return: The device type - one of the constants with the PDE_ prefix, such as:
		PDE_FLOPPY_DISK,  PDE_OPTICAL_DISK,  PDE_HARD_DISK.
		"""
		return call_sdk_function('PrlBootDev_GetType', self.handle)

	def set_type(self, nDevType):
		"""
		Set the boot device type.
		Use this function when adding a device to the boot device priority list. 
		Device type is a property that, together with device index, is used to 
		uniquely identify a device in a virtual machine
		@param nDevType: The device type to set. Can be one of the constants with the PDE_ prefix, such as:
		PDE_FLOPPY_DISK, PDE_OPTICAL_DISK, PDE_HARD_DISK.
		"""
		call_sdk_function('PrlBootDev_SetType', self.handle, nDevType)

	def get_index(self):
		"""
		Obtain the boot device index.
		@return: Integer. The boot device index.
		"""
		return call_sdk_function('PrlBootDev_GetIndex', self.handle)

	def set_index(self, nDevIndex):
		"""
		Set the boot device index.
		Device index is a property that, together with device type, is used to uniquely identify a device 
		in the virtual machine boot priority list. The index must be the same index the device 
		has in the main virtual machine configuration or it will not be recognized during boot.
		@param nDevIndex: Integer. The device index to set.
		"""
		call_sdk_function('PrlBootDev_SetIndex', self.handle, nDevIndex)

	def get_sequence_index(self):
		"""
		Obtain the sequence index of the boot device in the boot priority list.
		@return: Integer. The boot device sequence index.
		"""
		return call_sdk_function('PrlBootDev_GetSequenceIndex', self.handle)

	def set_sequence_index(self, nSequenceIndex):
		"""
		Assign a sequence index to a boot device in the boot priority list.
		@param nSequenceIndex: Integer. The sequence index to set (begins with 0).
		"""
		call_sdk_function('PrlBootDev_SetSequenceIndex', self.handle, nSequenceIndex)

	def is_in_use(self):
		"""
		Determine whether the boot device is enabled or disabled.
		@return: Boolean. True indicates that the device is enabled. False indicates otherwise.
		"""
		return bool(call_sdk_function('PrlBootDev_IsInUse', self.handle))

	def set_in_use(self, bInUse):
		"""
		Enable or disable the boot device in the boot priority list.
		@param bInUse: Boolean. Set to True to enable the device. Set to False to disable it.
		"""
		call_sdk_function('PrlBootDev_SetInUse', self.handle, bInUse)

class VmInfo(_Handle):
	"""
	Contains the virtual machine state, access rights, and some other information.
	"""

	def get_state(self):
		"""
		Return the virtual machine state information.
		"""
		return call_sdk_function('PrlVmInfo_GetState', self.handle)

	def get_access_rights(self):
		"""
		Obtains the L{AccessRights} object containing information about the virtual machine access rights.
		"""
		return handle_to_object(call_sdk_function('PrlVmInfo_GetAccessRights', self.handle))

	def is_invalid(self):
		"""
		Determine if the specified virtual machine is invalid.
		"""
		return bool(call_sdk_function('PrlVmInfo_IsInvalid', self.handle))

	def is_vm_waiting_for_answer(self):
		"""
		Determine if the specified virtual machine is waiting for an answer to a question that it asked.
		"""
		return bool(call_sdk_function('PrlVmInfo_IsVmWaitingForAnswer', self.handle))

	def is_vnc_server_started(self):
		"""
		Determine whether a VNC server is running for the specified virtual machine.
		"""
		return bool(call_sdk_function('PrlVmInfo_IsVncServerStarted', self.handle))

	def get_addition_state(self):
		"""
		Return the virtual machine addition state information.
		"""
		return call_sdk_function('PrlVmInfo_GetAdditionState', self.handle)

class FoundVmInfo(_Handle):
	"""
	Contains summary information about a virtual machine that was found as a result of a virtual machine search
	operation.
	"""

	def get_name(self):
		"""
		Obtains the virtual machine name.
		@return: A string containing the virtual machine name.
		"""
		return call_sdk_function('PrlFoundVmInfo_GetName', self.handle)

	def is_old_config(self):
		"""
		Determines whether the vitrual machine configuration is an older version.
		This method allows to determine whether the virtual machine was created with an older or the current version
		of the virtualization product that you are using.
		@return: Boolean. True indicates that the virtual machine was created with 
		an older version of the product. False indicates that the virtual machine was created with the 
		version that you are running.
		"""
		return bool(call_sdk_function('PrlFoundVmInfo_IsOldConfig', self.handle))

	def get_osversion(self):
		"""
		Obtains the guest OS version information.
		@return: A string containing the guest OS version.
		"""
		return call_sdk_function('PrlFoundVmInfo_GetOSVersion', self.handle)

	def get_config_path(self):
		"""
		Obtains the name and path of the directory containing the virtual machine files.
		@return: A string containing the name and path of the virtual machine directory.
		"""
		return call_sdk_function('PrlFoundVmInfo_GetConfigPath', self.handle)

	def is_template(self):
		"""
		Determines if the virtual machine is a template.
		A virtual machine can be a regular virtual machine that you can run or it can be a template used to create
		new virtual machines.
		@return: Boolean. True indicates that the
		virtual machine is a template. False indicates that it is a regular virtual machine.
		"""
		return bool(call_sdk_function('PrlFoundVmInfo_IsTemplate', self.handle))

class AccessRights(_Handle):
	"""
	Contains info about access rights that the users other than the owner have in respect to the virtual machine.
	"""

	def is_allowed(self, nPermission):
		"""
		Determine if the current user is authorized to perform a specified task on the virtual machine.
		@param nPermission: The task type. Can be one of constants with the PAR_ prefix, such as: 
		PAR_VM_START_ACCESS,  PAR_VM_STOP_ACCESS,  PAR_VM_PAUSE_ACCESS,  PAR_VM_RESET_ACCESS, PAR_VM_SUSPEND_ACCESS,  PAR_VM_RESUME_ACCESS,  PAR_VM_DELETE_ACCESS, and others.
		@return: A Boolean value indicating whether the user is authorized to perform the task. 
		True - authorized; False - not authorized.
		"""
		return bool(call_sdk_function('PrlAcl_IsAllowed', self.handle, nPermission))

	def get_access_for_others(self):
		"""
		Obtain the virtual machine access rights information.
		@return: One of the following access rights constants:
		PAO_VM_NOT_SHARED - only the owner of the virtual machine has access to it.
		PAO_VM_SHARED_ON_VIEW - other users can view but not run the virtual machine.
		PAO_VM_SHARED_ON_VIEW_AND_RUN - other useres can view and run the vitual machine.
		PAO_VM_SHARED_ON_FULL_ACCESS - all users have full access to a virtual machine.
		"""
		return call_sdk_function('PrlAcl_GetAccessForOthers', self.handle)

	def set_access_for_others(self, nAccessForOthers):
		"""
		Set access rights on a virtual machine.
		@param nAccessForOthers: The access rights level to set. Can be one of the following constants:
		PAO_VM_NOT_SHARED - only the owner of the virtual machine has access to it.
		PAO_VM_SHARED_ON_VIEW - other users can view the virtual machine.
		PAO_VM_SHARED_ON_VIEW_AND_RUN - other users can view and run the virtual machine.
		PAO_VM_SHARED_ON_FULL_ACCESS - all users have full access to the virtual machine.
		"""
		call_sdk_function('PrlAcl_SetAccessForOthers', self.handle, nAccessForOthers)

	def get_owner_name(self):
		"""
		Determine the virtual machine owner name.
		@return: A string containing the owner name.
		"""
		return call_sdk_function('PrlAcl_GetOwnerName', self.handle)

	def is_current_session_owner(self):
		"""
		Determine if the current user is the owner of the virtual machine.
		@return: A Boolean value. True - the current user is the owner. False - the user is not the owner.
		"""
		return bool(call_sdk_function('PrlAcl_IsCurrentSessionOwner', self.handle))

class VmToolsInfo(_Handle):
	"""
	Provides methods for determining whether the Tools package is installed in a virtual
	machine and for obtaining its status and version information.
	"""

	def get_state(self):
		return call_sdk_function('PrlVmToolsInfo_GetState', self.handle)

	def get_version(self):
		return call_sdk_function('PrlVmToolsInfo_GetVersion', self.handle)

class Statistics(_Handle):
	"""
	Provides methods for obtaining performance statistics for the host computer or an individual virtual machine. To obtain the L{Statistics} object for the host computer, use the L{Server.get_statistics} method. To obtain the L{Statistics} object for a virtual machine, use the L{Vm.get_statistics} method.
	"""

	def get_total_ram_size(self):
		"""
		Return total RAM size in bytes.
		@return: An integer containing the total RAM size in bytes.
		"""
		return call_sdk_function('PrlStat_GetTotalRamSize', self.handle)

	def get_usage_ram_size(self):
		"""
		Return the size of RAM currently in use, in bytes.
		@return: An integer containing the RAM size currently in use.
		"""
		return call_sdk_function('PrlStat_GetUsageRamSize', self.handle)

	def get_free_ram_size(self):
		"""
		Return free RAM size in bytes.
		@return: An integer specifying free RAM size in bytes.
		"""
		return call_sdk_function('PrlStat_GetFreeRamSize', self.handle)

	def get_real_ram_size(self):
		return call_sdk_function('PrlStat_GetRealRamSize', self.handle)

	def get_os_uptime(self):
		"""
		Return the virtual machine uptime in seconds.
		The virtual machine uptime is counted from the date the counter was started. The date can be determined using the L{VmConfig.get_uptime_start_date} method.
		@return: A string containing the virtual machine uptime in seconds.
		"""
		return call_sdk_function('PrlStat_GetOsUptime', self.handle)

	def get_cpus_stats_count(self):
		"""
		Return the number of L{StatCpu} objects contained in this L{Statistics} object. Each L{StatCpu} object contains statistics for an individual CPU.
		Use the number returned to iterate through the object list and obtain individual objects using the L{Statistics.get_cpu_stat} method.
		@return: Integer. The number of L{StatCpu} objects contained in this L{Statistics} object.
		"""
		return call_sdk_function('PrlStat_GetCpusStatsCount', self.handle)

	def get_cpu_stat(self, nIndex):
		"""
		Return a L{StatCpu} object specified by an index.
		To obtain the total number of object in the list, use the L{Statistics.get_cpus_stats_count} method.
		@param nIndex: Integer. An index of an object in the list (begins with 0).
		@return:  A L{StatCpu} object containing statistis for a given CPU.
		"""
		return handle_to_object(call_sdk_function('PrlStat_GetCpuStat', self.handle, nIndex))

class StatCpu(_Handle):
	"""
	Provides methods for obtaining CPU statistics for the host computer or a virtual machine. To obtain the object, use the L{Statistics.get_cpu_stat} method.
	"""

	def get_cpu_usage(self):
		"""
		Return the CPU usage, in percents.
		@return: An integer containing the CPU usage in percent.
		"""
		return call_sdk_function('PrlStatCpu_GetCpuUsage', self.handle)

	def get_total_time(self):
		"""
		Return the CPU total time, in seconds.
		@return: An integer containing the CPU total time, in seconds.
		"""
		return call_sdk_function('PrlStatCpu_GetTotalTime', self.handle)

	def get_user_time(self):
		"""
		Return the CPU user time in seconds
		@return: An integer containing the CPU user time, in seconds.
		"""
		return call_sdk_function('PrlStatCpu_GetUserTime', self.handle)

	def get_system_time(self):
		"""
		Return the CPU time, in seconds.
		@return: An integer containing the CPU time in seconds.
		"""
		return call_sdk_function('PrlStatCpu_GetSystemTime', self.handle)

class License(_Handle):

	def is_valid(self):
		"""
		Determines whether the license if valid or not.
		@return: Boolean. True indicates that the license if valid. False indicates otherwise.
		"""
		return bool(call_sdk_function('PrlLic_IsValid', self.handle))

	def get_status(self):
		"""
		Determines the license status.
		@return: A integer containing the license status code.
		"""
		return call_sdk_function('PrlLic_GetStatus', self.handle)

	def get_license_key(self):
		"""
		Obtains the liecense key.
		@return: A sting containing the license key.
		"""
		return call_sdk_function('PrlLic_GetLicenseKey', self.handle)

	def get_user_name(self):
		"""
		Obtains the name of the user on the license.
		@return: A string containing the name of the user.
		"""
		return call_sdk_function('PrlLic_GetUserName', self.handle)

	def get_company_name(self):
		"""
		Obtains the name of the company on the license.
		@return: A string containing the company name.
		"""
		return call_sdk_function('PrlLic_GetCompanyName', self.handle)

class ServerInfo(_Handle):
	"""
	Provides methods for obtaining the Dispatcher Service information.
	"""

	def get_host_name(self):
		"""
		Return the name of the machine hosting the specified Dispatcher Service.
		"""
		return call_sdk_function('PrlSrvInfo_GetHostName', self.handle)

	def get_os_version(self):
		"""
		Returns the version of the host operating system.
		"""
		return call_sdk_function('PrlSrvInfo_GetOsVersion', self.handle)

	def get_product_version(self):
		"""
		Return the product version number.
		"""
		return call_sdk_function('PrlSrvInfo_GetProductVersion', self.handle)

	def get_cmd_port(self):
		"""
		Return the port number at which the Dispatcher Service is listening for requests.
		"""
		return call_sdk_function('PrlSrvInfo_GetCmdPort', self.handle)

	def get_application_mode(self):
		return call_sdk_function('PrlSrvInfo_GetApplicationMode', self.handle)

	def get_server_uuid(self):
		"""
		Return the host machine UUID (universally unique ID).
		"""
		return call_sdk_function('PrlSrvInfo_GetServerUuid', self.handle)

	def get_start_time(self):
		return call_sdk_function('PrlSrvInfo_GetStartTime', self.handle)

	def get_start_time_monotonic(self):
		return call_sdk_function('PrlSrvInfo_GetStartTimeMonotonic', self.handle)

class NetService(_Handle):
	"""
	Provides methods for obtaining the Dispatcher Service network status information.
	"""

	def get_status(self):
		return call_sdk_function('PrlNetSvc_GetStatus', self.handle)

class LoginResponse(_Handle):
	"""
	Contains information returned as a result of a successful Dispatcher Service login operation.
	"""

	def get_session_uuid(self):
		"""
		Returns the session UUID string (used to restore a session).
		"""
		return call_sdk_function('PrlLoginResponse_GetSessionUuid', self.handle)

	def get_running_task_count(self):
		"""
		Return the total number of running tasks.
		"""
		return call_sdk_function('PrlLoginResponse_GetRunningTaskCount', self.handle)

	def get_running_task_by_index(self, nIndex):
		"""
		Obtain the L{RunningTask} object containing information about a running task.
		"""
		return handle_to_object(call_sdk_function('PrlLoginResponse_GetRunningTaskByIndex', self.handle, nIndex))

	def get_server_uuid(self):
		"""
		Return the host machine UUID.
		"""
		return call_sdk_function('PrlLoginResponse_GetServerUuid', self.handle)

	def get_host_os_version(self):
		"""
		Return the host OS version.
		"""
		return call_sdk_function('PrlLoginResponse_GetHostOsVersion', self.handle)

	def get_product_version(self):
		"""
		Return the product version number.
		"""
		return call_sdk_function('PrlLoginResponse_GetProductVersion', self.handle)

class RunningTask(_Handle):
	"""
	The RunningTask class is used to recover from a lost Dispatcher Service connection.
	It allows to attach to an existing task that was started in the previous session and
	is still running inside the Dispatcher Service.
	"""

	def get_task_uuid(self):
		"""
		Return the task UUID (universally unique ID).
		"""
		return call_sdk_function('PrlRunningTask_GetTaskUuid', self.handle)

	def get_task_type(self):
		"""
		Determine the task type.
		"""
		return call_sdk_function('PrlRunningTask_GetTaskType', self.handle)

	def get_task_parameters_as_string(self):
		"""
		Return task parameters as a string.
		"""
		return call_sdk_function('PrlRunningTask_GetTaskParametersAsString', self.handle)

class OsesMatrix(_Handle):

	def get_supported_oses_types(self):
		return handle_to_object(call_sdk_function('PrlOsesMatrix_GetSupportedOsesTypes', self.handle))

	def get_supported_oses_versions(self, nGuestOsType):
		return handle_to_object(call_sdk_function('PrlOsesMatrix_GetSupportedOsesVersions', self.handle, nGuestOsType))

	def get_default_os_version(self, nGuestOsType):
		return call_sdk_function('PrlOsesMatrix_GetDefaultOsVersion', self.handle, nGuestOsType)

	def get_support_type(self, nGuestOsType, nGuestOSVersion):
		return call_sdk_function('PrlOsesMatrix_GetSupportType', self.handle, nGuestOsType, nGuestOSVersion)

class ProblemReport(_Handle):

	def set_user_name(self, sNewUserName):
		call_sdk_function('PrlReport_SetUserName', self.handle, sNewUserName)

	def get_user_name(self):
		return call_sdk_function('PrlReport_GetUserName', self.handle)

	def set_user_email(self, sNewUserEmail):
		call_sdk_function('PrlReport_SetUserEmail', self.handle, sNewUserEmail)

	def get_user_email(self):
		return call_sdk_function('PrlReport_GetUserEmail', self.handle)

	def set_description(self, sNewDescription):
		call_sdk_function('PrlReport_SetDescription', self.handle, sNewDescription)

	def get_description(self):
		return call_sdk_function('PrlReport_GetDescription', self.handle)

	def set_type(self, nReportType):
		call_sdk_function('PrlReport_SetType', self.handle, nReportType)

	def get_type(self):
		return call_sdk_function('PrlReport_GetType', self.handle)

	def set_reason(self, nReportReason):
		call_sdk_function('PrlReport_SetReason', self.handle, nReportReason)

	def get_reason(self):
		return call_sdk_function('PrlReport_GetReason', self.handle)

	def get_scheme(self):
		return call_sdk_function('PrlReport_GetScheme', self.handle)

	def get_archive_file_name(self):
		return call_sdk_function('PrlReport_GetArchiveFileName', self.handle)

	def get_data(self):
		return call_sdk_function('PrlReport_GetData', self.handle)

	def as_string(self):
		return call_sdk_function('PrlReport_AsString', self.handle)

	def assembly(self, nFlags):
		return Job(SDK.PrlReport_Assembly(self.handle, nFlags)[0])

	def send(self, bUseProxy, sProxyHost, nProxyPort, sProxyUserLogin, sProxyUserPasswd, nProblemSendTimeout, nReserved):
		return Job(SDK.PrlReport_Send(self.handle, bUseProxy, sProxyHost, nProxyPort, sProxyUserLogin, sProxyUserPasswd, nProblemSendTimeout, nReserved)[0])

class ApplianceConfig(_Handle):

	def __init__(self, handle = consts.PRL_INVALID_HANDLE):
		self.handle = handle
		if self.handle == consts.PRL_INVALID_HANDLE:
			self.handle = call_sdk_function('PrlAppliance_Create')
		_Handle.__init__(self, self.handle)

	def create(self):
		return handle_to_object(call_sdk_function('PrlAppliance_Create'))

class OfflineManageService(_Handle):

	def create(self):
		return handle_to_object(call_sdk_function('PrlOffmgmtService_Create'))

	def get_name(self):
		return call_sdk_function('PrlOffmgmtService_GetName', self.handle)

	def set_name(self, sName):
		call_sdk_function('PrlOffmgmtService_SetName', self.handle, sName)

	def get_port(self):
		return call_sdk_function('PrlOffmgmtService_GetPort', self.handle)

	def set_port(self, nPort):
		call_sdk_function('PrlOffmgmtService_SetPort', self.handle, nPort)

	def is_used_by_default(self):
		return bool(call_sdk_function('PrlOffmgmtService_IsUsedByDefault', self.handle))

	def set_used_by_default(self, bDefault):
		call_sdk_function('PrlOffmgmtService_SetUsedByDefault', self.handle, bDefault)

class NetworkShapingEntry(_Handle):

	def create(self, nClassId, nTotalRate):
		return handle_to_object(call_sdk_function('PrlNetworkShapingEntry_Create', nClassId, nTotalRate))

	def get_class_id(self):
		return call_sdk_function('PrlNetworkShapingEntry_GetClassId', self.handle)

	def set_class_id(self, nClassId):
		call_sdk_function('PrlNetworkShapingEntry_SetClassId', self.handle, nClassId)

	def get_total_rate(self):
		return call_sdk_function('PrlNetworkShapingEntry_GetTotalRate', self.handle)

	def set_total_rate(self, nTotalRate):
		call_sdk_function('PrlNetworkShapingEntry_SetTotalRate', self.handle, nTotalRate)

	def set_device(self, sDev):
		call_sdk_function('PrlNetworkShapingEntry_SetDevice', self.handle, sDev)

	def get_device(self):
		return call_sdk_function('PrlNetworkShapingEntry_GetDevice', self.handle)

	def set_rate(self, nRate):
		call_sdk_function('PrlNetworkShapingEntry_SetRate', self.handle, nRate)

	def get_rate(self):
		return call_sdk_function('PrlNetworkShapingEntry_GetRate', self.handle)

	def set_rate_mpu(self, nRateMPU):
		call_sdk_function('PrlNetworkShapingEntry_SetRateMPU', self.handle, nRateMPU)

	def get_rate_mpu(self):
		return call_sdk_function('PrlNetworkShapingEntry_GetRateMPU', self.handle)

class NetworkShapingConfig(_Handle):

	def is_enabled(self):
		return bool(call_sdk_function('PrlNetworkShapingConfig_IsEnabled', self.handle))

	def set_enabled(self, bEnabled):
		call_sdk_function('PrlNetworkShapingConfig_SetEnabled', self.handle, bEnabled)

	def get_network_shaping_list(self):
		return handle_to_object(call_sdk_function('PrlNetworkShapingConfig_GetNetworkShapingList', self.handle))

	def set_network_shaping_list(self, hList):
		call_sdk_function('PrlNetworkShapingConfig_SetNetworkShapingList', self.handle, conv_handle_arg(hList))

	def get_network_device_bandwidth_list(self):
		return handle_to_object(call_sdk_function('PrlNetworkShapingConfig_GetNetworkDeviceBandwidthList', self.handle))

	def set_network_device_bandwidth_list(self, hList):
		call_sdk_function('PrlNetworkShapingConfig_SetNetworkDeviceBandwidthList', self.handle, conv_handle_arg(hList))

class NetworkClass(_Handle):

	def create(self, nClassId):
		return handle_to_object(call_sdk_function('PrlNetworkClass_Create', nClassId))

	def get_class_id(self):
		return call_sdk_function('PrlNetworkClass_GetClassId', self.handle)

	def set_class_id(self, nClassId):
		call_sdk_function('PrlNetworkClass_SetClassId', self.handle, nClassId)

	def get_network_list(self):
		return handle_to_object(call_sdk_function('PrlNetworkClass_GetNetworkList', self.handle))

	def set_network_list(self, hNetworkList):
		call_sdk_function('PrlNetworkClass_SetNetworkList', self.handle, conv_handle_arg(hNetworkList))

class NetworkRate(_Handle):

	def create(self, nClassId, nRate):
		return handle_to_object(call_sdk_function('PrlNetworkRate_Create', nClassId, nRate))

	def get_class_id(self):
		return call_sdk_function('PrlNetworkRate_GetClassId', self.handle)

	def get_rate(self):
		return call_sdk_function('PrlNetworkRate_GetRate', self.handle)

class CtTemplate(_Handle):

	def get_name(self):
		return call_sdk_function('PrlCtTemplate_GetName', self.handle)

	def get_type(self):
		return call_sdk_function('PrlCtTemplate_GetType', self.handle)

	def get_description(self):
		return call_sdk_function('PrlCtTemplate_GetDescription', self.handle)

	def get_version(self):
		return call_sdk_function('PrlCtTemplate_GetVersion', self.handle)

	def get_os_type(self):
		return call_sdk_function('PrlCtTemplate_GetOsType', self.handle)

	def get_os_version(self):
		return call_sdk_function('PrlCtTemplate_GetOsVersion', self.handle)

	def get_os_template(self):
		return call_sdk_function('PrlCtTemplate_GetOsTemplate', self.handle)

	def get_cpu_mode(self):
		return call_sdk_function('PrlCtTemplate_GetCpuMode', self.handle)

	def is_cached(self):
		return bool(call_sdk_function('PrlCtTemplate_IsCached', self.handle))

class UsbIdentity(_Handle):

	def get_system_name(self):
		return call_sdk_function('PrlUsbIdent_GetSystemName', self.handle)

	def get_friendly_name(self):
		return call_sdk_function('PrlUsbIdent_GetFriendlyName', self.handle)

	def get_vm_uuid_association(self):
		return call_sdk_function('PrlUsbIdent_GetVmUuidAssociation', self.handle)

class FirewallRule(_Handle):

	def __init__(self, handle = consts.PRL_INVALID_HANDLE):
		self.handle = handle
		if self.handle == consts.PRL_INVALID_HANDLE:
			self.handle = call_sdk_function('PrlFirewallRule_Create')
		_Handle.__init__(self, self.handle)

	def create(self):
		return handle_to_object(call_sdk_function('PrlFirewallRule_Create'))

	def get_local_port(self):
		return call_sdk_function('PrlFirewallRule_GetLocalPort', self.handle)

	def set_local_port(self, nPort):
		call_sdk_function('PrlFirewallRule_SetLocalPort', self.handle, nPort)

	def get_remote_port(self):
		return call_sdk_function('PrlFirewallRule_GetRemotePort', self.handle)

	def set_remote_port(self, nPort):
		call_sdk_function('PrlFirewallRule_SetRemotePort', self.handle, nPort)

	def get_protocol(self):
		return call_sdk_function('PrlFirewallRule_GetProtocol', self.handle)

	def set_protocol(self, sProtocol):
		call_sdk_function('PrlFirewallRule_SetProtocol', self.handle, sProtocol)

	def get_local_net_address(self):
		return call_sdk_function('PrlFirewallRule_GetLocalNetAddress', self.handle)

	def set_local_net_address(self, sAddr):
		call_sdk_function('PrlFirewallRule_SetLocalNetAddress', self.handle, sAddr)

	def get_remote_net_address(self):
		return call_sdk_function('PrlFirewallRule_GetRemoteNetAddress', self.handle)

	def set_remote_net_address(self, sAddr):
		call_sdk_function('PrlFirewallRule_SetRemoteNetAddress', self.handle, sAddr)

class IPPrivNet(_Handle):

	def create(self):
		return handle_to_object(call_sdk_function('PrlIPPrivNet_Create'))

	def get_name(self):
		return call_sdk_function('PrlIPPrivNet_GetName', self.handle)

	def set_net_addresses(self, NetAddresses):
		call_sdk_function('PrlIPPrivNet_SetNetAddresses', self.handle, conv_handle_arg(NetAddresses))

	def get_net_addresses(self):
		return handle_to_object(call_sdk_function('PrlIPPrivNet_GetNetAddresses', self.handle))

	def set_name(self, sName):
		call_sdk_function('PrlIPPrivNet_SetName', self.handle, sName)

	def is_global(self):
		return bool(call_sdk_function('PrlIPPrivNet_IsGlobal', self.handle))

	def set_global(self, bGlobal):
		call_sdk_function('PrlIPPrivNet_SetGlobal', self.handle, bGlobal)

class PluginInfo(_Handle):

	def get_vendor(self):
		return call_sdk_function('PrlPluginInfo_GetVendor', self.handle)

	def get_copyright(self):
		return call_sdk_function('PrlPluginInfo_GetCopyright', self.handle)

	def get_short_description(self):
		return call_sdk_function('PrlPluginInfo_GetShortDescription', self.handle)

	def get_long_description(self):
		return call_sdk_function('PrlPluginInfo_GetLongDescription', self.handle)

	def get_version(self):
		return call_sdk_function('PrlPluginInfo_GetVersion', self.handle)

	def get_id(self):
		return call_sdk_function('PrlPluginInfo_GetId', self.handle)

class BackupResult(_Handle):

	def get_backup_uuid(self):
		return call_sdk_function('PrlBackupResult_GetBackupUuid', self.handle)

class NetworkShapingBandwidthEntry(_Handle):

	def create(self, sDev, nBandwidth):
		return handle_to_object(call_sdk_function('PrlNetworkShapingBandwidthEntry_Create', sDev, nBandwidth))

	def set_device(self, sDev):
		call_sdk_function('PrlNetworkShapingBandwidthEntry_SetDevice', self.handle, sDev)

	def get_device(self):
		return call_sdk_function('PrlNetworkShapingBandwidthEntry_GetDevice', self.handle)

	def set_bandwidth(self, nBandwidth):
		call_sdk_function('PrlNetworkShapingBandwidthEntry_SetBandwidth', self.handle, nBandwidth)

	def get_bandwidth(self):
		return call_sdk_function('PrlNetworkShapingBandwidthEntry_GetBandwidth', self.handle)

class CpuFeatures(_Handle):

	def __init__(self, handle = consts.PRL_INVALID_HANDLE):
		self.handle = handle
		if self.handle == consts.PRL_INVALID_HANDLE:
			self.handle = call_sdk_function('PrlCpuFeatures_Create')
		_Handle.__init__(self, self.handle)

	def create(self):
		return handle_to_object(call_sdk_function('PrlCpuFeatures_Create'))

	def get_value(self, nId):
		return call_sdk_function('PrlCpuFeatures_GetValue', self.handle, nId)

	def set_value(self, nId, nValue):
		call_sdk_function('PrlCpuFeatures_SetValue', self.handle, nId, nValue)

class CPUPool(_Handle):

	def get_vendor(self):
		return call_sdk_function('PrlCPUPool_GetVendor', self.handle)

	def get_name(self):
		return call_sdk_function('PrlCPUPool_GetName', self.handle)

	def get_cpu_features_mask(self):
		return handle_to_object(call_sdk_function('PrlCPUPool_GetCpuFeaturesMask', self.handle))

class VmBackup(_Handle):

	def commit(self):
		return Job(SDK.PrlVmBackup_Commit(self.handle)[0])

	def rollback(self):
		return Job(SDK.PrlVmBackup_Rollback(self.handle)[0])

	def get_disks_count(self):
		return call_sdk_function('PrlVmBackup_GetDisksCount', self.handle)

	def get_uuid(self):
		return call_sdk_function('PrlVmBackup_GetUuid', self.handle)

	def get_disk(self, nDiskIndex):
		return handle_to_object(call_sdk_function('PrlVmBackup_GetDisk', self.handle, nDiskIndex))

class DiskMap(_Handle):

	def get_size(self):
		return call_sdk_function('PrlDiskMap_GetSize', self.handle)

	def get_granularity(self):
		return call_sdk_function('PrlDiskMap_GetGranularity', self.handle)

	def read(self):
		return call_sdk_function('PrlDiskMap_Read', self.handle)

class Disk(_Handle):
	"""
	Provides methods for creating, configuring, and maintaining virtual disks.
	"""

	def open_disk_local(self, pDiskName, OpenFlags, hPolicyList):
		return handle_to_object(call_sdk_function('PrlDisk_OpenDisk_Local', pDiskName, OpenFlags, conv_handle_arg(hPolicyList)))

	def wait_for_completion(self):
		call_sdk_function('PrlDisk_WaitForCompletion', self.handle)

	def flush_cache(self):
		call_sdk_function('PrlDisk_FlushCache', self.handle)

	def get_changes_map_local(self, sPit1Uuid, sPit2Uuid):
		return handle_to_object(call_sdk_function('PrlDisk_GetChangesMap_Local', self.handle, sPit1Uuid, sPit2Uuid))

	def free(self):
		call_sdk_function('PrlDisk_Free', self.handle)

class DiskMap(_Handle):

	def get_size(self):
		return call_sdk_function('PrlDiskMap_GetSize', self.handle)

	def get_granularity(self):
		return call_sdk_function('PrlDiskMap_GetGranularity', self.handle)

	def read(self):
		return call_sdk_function('PrlDiskMap_Read', self.handle)

class VcmmdConfig(_Handle):

	def set_policy(self, sPolicy):
		call_sdk_function('PrlVcmmdConfig_SetPolicy', self.handle, sPolicy)

	def get_policy(self):
		return call_sdk_function('PrlVcmmdConfig_GetPolicy', self.handle)

class IoDisplayScreenSize:

	def __init__(self):
		self.width = 0
		self.height = 0
		self.depth = 0
		self.lineBytes = 0
		self.display = 0
		self.displayX = 0
		self.displayY = 0

	def to_list(self):
		return [self.width, self.height, self.depth, self.lineBytes, self.display, self.displayX, self.displayY]

	def send_key_event(self, hVm, key_list, ev = consts.PKE_CLICK, delay = 250):
		if ev == consts.PKE_CLICK:
			self.send_key_event(hVm, key_list, consts.PKE_PRESS, delay)
			self.send_key_event(hVm, key_list, consts.PKE_RELEASE, delay)
			return
		for key in key_list:
			_VmIOKeyboard.send_key_event(self, hVm, key, ev)
		if delay > 0:
			time.sleep(float(delay)/1000.0)

	def send_key_event_ex(self, hVm, key, ev = consts.PKE_CLICK, delay = 250):
		if ev == consts.PKE_CLICK:
			self.send_key_event_ex(hVm, key, consts.PKE_PRESS, delay)
			self.send_key_event_ex(hVm, key, consts.PKE_RELEASE, delay)
			return
		_VmIOKeyboard.send_key_event_ex(self, hVm, key, ev)
		if delay > 0:
			time.sleep(float(delay)/1000.0)

	def display_set_configuration(self, hVm, config_list):
		list_args = []
		for cfg in config_list:
			list_args.append(cfg.to_list())
		call_sdk_function('PrlDevDisplay_SetConfiguration', conv_handle_arg(hVm), list_args)

def handle_to_object(handle):
	obj = None
	if handle == None:
		return obj
	handle_type = call_sdk_function('PrlHandle_GetType', handle)
	if handle_type == consts.PHT_STRINGS_LIST:
		obj = StringList(handle)
	if handle_type == consts.PHT_HANDLES_LIST:
		obj = HandleList(handle)
	if handle_type == consts.PHT_OPAQUE_TYPE_LIST:
		obj = OpTypeList(handle)
	if handle_type == consts.PHT_RESULT:
		obj = Result(handle)
	if handle_type == consts.PHT_EVENT:
		obj = Event(handle)
	if handle_type == consts.PHT_EVENT_PARAMETER:
		obj = EventParam(handle)
	if handle_type == consts.PHT_JOB:
		obj = Job(handle)
	if handle_type == consts.PHT_SERVER:
		obj = Server(handle)
	if handle_type == consts.PHT_REMOTE_FILESYSTEM_INFO:
		obj = FsInfo(handle)
	if handle_type == consts.PHT_REMOTE_FILESYSTEM_ENTRY:
		obj = FsEntry(handle)
	if handle_type == consts.PHT_SERVER_CONFIG:
		obj = ServerConfig(handle)
	if handle_type == consts.PHT_HW_GENERIC_DEVICE:
		obj = HostDevice(handle)
	if handle_type == consts.PHT_HW_HARD_DISK:
		obj = HostHardDisk(handle)
	if handle_type == consts.PHT_HW_HARD_DISK_PARTITION:
		obj = HdPartition(handle)
	if handle_type == consts.PHT_HW_NET_ADAPTER:
		obj = HostNet(handle)
	if handle_type == consts.PHT_HW_GENERIC_PCI_DEVICE:
		obj = HostPciDevice(handle)
	if handle_type == consts.PHT_USER_PROFILE:
		obj = UserConfig(handle)
	if handle_type == consts.PHT_USER_INFO:
		obj = UserInfo(handle)
	if handle_type == consts.PHT_DISP_CONFIG:
		obj = DispConfig(handle)
	if handle_type == consts.PHT_VIRTUAL_NETWORK:
		obj = VirtualNet(handle)
	if handle_type == consts.PHT_PORT_FORWARDING:
		obj = PortForward(handle)
	if handle_type == consts.PHT_VIRTUAL_DEV_FLOPPY or handle_type == consts.PHT_VIRTUAL_DEV_PARALLEL_PORT or handle_type == consts.PHT_VIRTUAL_DEV_OPTICAL_DISK or handle_type == consts.PHT_VIRTUAL_DEV_GENERIC_PCI or handle_type == consts.PHT_VIRTUAL_DEV_GENERIC_SCSI:
		obj = VmDevice(handle)
	if handle_type == consts.PHT_VIRTUAL_DEV_HARD_DISK:
		obj = VmHardDisk(handle)
	if handle_type == consts.PHT_VIRTUAL_DEV_HD_PARTITION:
		obj = VmHdPartition(handle)
	if handle_type == consts.PHT_VIRTUAL_DISK_ENCRYPTION:
		obj = VmHdEncryption(handle)
	if handle_type == consts.PHT_VIRTUAL_DEV_NET_ADAPTER:
		obj = VmNet(handle)
	if handle_type == consts.PHT_VIRTUAL_DEV_USB_DEVICE:
		obj = VmUsb(handle)
	if handle_type == consts.PHT_VIRTUAL_DEV_SOUND:
		obj = VmSound(handle)
	if handle_type == consts.PHT_VIRTUAL_DEV_SERIAL_PORT:
		obj = VmSerial(handle)
	if handle_type == consts.PHT_VIRTUAL_MACHINE:
		obj = Vm(handle)
	if handle_type == consts.PHT_VM_GUEST_SESSION:
		obj = VmGuest(handle)
	if handle_type == consts.PHT_SHARE:
		obj = Share(handle)
	if handle_type == consts.PHT_BOOT_DEVICE:
		obj = BootDevice(handle)
	if handle_type == consts.PHT_VM_INFO:
		obj = VmInfo(handle)
	if handle_type == consts.PHT_FOUND_VM_INFO:
		obj = FoundVmInfo(handle)
	if handle_type == consts.PHT_ACCESS_RIGHTS:
		obj = AccessRights(handle)
	if handle_type == consts.PHT_VM_TOOLS_INFO:
		obj = VmToolsInfo(handle)
	if handle_type == consts.PHT_SYSTEM_STATISTICS:
		obj = Statistics(handle)
	if handle_type == consts.PHT_SYSTEM_STATISTICS_CPU:
		obj = StatCpu(handle)
	if handle_type == consts.PHT_LICENSE:
		obj = License(handle)
	if handle_type == consts.PHT_SERVER_INFO:
		obj = ServerInfo(handle)
	if handle_type == consts.PHT_NET_SERVICE_STATUS:
		obj = NetService(handle)
	if handle_type == consts.PHT_LOGIN_RESPONSE:
		obj = LoginResponse(handle)
	if handle_type == consts.PHT_RUNNING_TASK:
		obj = RunningTask(handle)
	if handle_type == consts.PHT_GUEST_OSES_MATRIX:
		obj = OsesMatrix(handle)
	if handle_type == consts.PHT_PROBLEM_REPORT:
		obj = ProblemReport(handle)
	if handle_type == consts.PHT_APPLIANCE_CONFIG:
		obj = ApplianceConfig(handle)
	if handle_type == consts.PHT_OFFLINE_SERVICE:
		obj = OfflineManageService(handle)
	if handle_type == consts.PHT_NETWORK_SHAPING:
		obj = NetworkShapingEntry(handle)
	if handle_type == consts.PHT_NETWORK_SHAPING_CONFIG:
		obj = NetworkShapingConfig(handle)
	if handle_type == consts.PHT_NETWORK_CLASS:
		obj = NetworkClass(handle)
	if handle_type == consts.PHT_NETWORK_RATE:
		obj = NetworkRate(handle)
	if handle_type == consts.PHT_CT_TEMPLATE:
		obj = CtTemplate(handle)
	if handle_type == consts.PHT_USB_IDENTITY:
		obj = UsbIdentity(handle)
	if handle_type == consts.PHT_FIREWALL_RULE:
		obj = FirewallRule(handle)
	if handle_type == consts.PHT_IPPRIV_NET:
		obj = IPPrivNet(handle)
	if handle_type == consts.PHT_PLUGIN_INFO:
		obj = PluginInfo(handle)
	if handle_type == consts.PHT_BACKUP_RESULT:
		obj = BackupResult(handle)
	if handle_type == consts.PHT_NETWORK_SHAPING_BANDWIDTH:
		obj = NetworkShapingBandwidthEntry(handle)
	if handle_type == consts.PHT_CPU_FEATURES:
		obj = CpuFeatures(handle)
	if handle_type == consts.PHT_CPU_POOL:
		obj = CPUPool(handle)
	if handle_type == consts.PHT_BACKUP:
		obj = VmBackup(handle)
	if handle_type == consts.PHT_VIRTUAL_DISK_MAP:
		obj = DiskMap(handle)
	if handle_type == consts.PHT_VIRTUAL_DISK:
		obj = Disk(handle)
	if handle_type == consts.PHT_VIRTUAL_DISK_MAP:
		obj = DiskMap(handle)
	if handle_type == consts.PHT_VCMMD_CONFIG:
		obj = VcmmdConfig(handle)
	if obj == None:
		sdk_check_result(errors.PRL_ERR_INVALID_HANDLE)
	return obj

